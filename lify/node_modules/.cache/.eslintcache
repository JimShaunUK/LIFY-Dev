[{"/Users/jim/Desktop/LIFY DEV/lify/src/index.js":"1","/Users/jim/Desktop/LIFY DEV/lify/src/App.js":"2","/Users/jim/Desktop/LIFY DEV/lify/src/serviceWorkerRegistration.js":"3","/Users/jim/Desktop/LIFY DEV/lify/src/reportWebVitals.js":"4","/Users/jim/Desktop/LIFY DEV/lify/src/store.js":"5","/Users/jim/Desktop/LIFY DEV/lify/src/Components/Header.jsx":"6","/Users/jim/Desktop/LIFY DEV/lify/src/Components/Footer.jsx":"7","/Users/jim/Desktop/LIFY DEV/lify/src/Components/Search.jsx":"8","/Users/jim/Desktop/LIFY DEV/lify/src/Screens/HomeScreen.jsx":"9","/Users/jim/Desktop/LIFY DEV/lify/src/Screens/StoreScreen.jsx":"10","/Users/jim/Desktop/LIFY DEV/lify/src/Components/Product.jsx":"11","/Users/jim/Desktop/LIFY DEV/lify/src/Components/Loader.jsx":"12","/Users/jim/Desktop/LIFY DEV/lify/src/Reducers/productReducers.js":"13","/Users/jim/Desktop/LIFY DEV/lify/src/Actions/productActions.js":"14","/Users/jim/Desktop/LIFY DEV/lify/src/Screens/ProductScreen.jsx":"15","/Users/jim/Desktop/LIFY DEV/lify/src/Components/Town.jsx":"16","/Users/jim/Desktop/LIFY DEV/lify/src/Reducers/retailerReducers.js":"17","/Users/jim/Desktop/LIFY DEV/lify/src/Actions/retailerActions.js":"18","/Users/jim/Desktop/LIFY DEV/lify/src/Reducers/townReducers.js":"19","/Users/jim/Desktop/LIFY DEV/lify/src/Screens/TownScreen.jsx":"20","/Users/jim/Desktop/LIFY DEV/lify/src/Actions/townActions.js":"21","/Users/jim/Desktop/LIFY DEV/lify/src/Components/Message.jsx":"22","/Users/jim/Desktop/LIFY DEV/lify/src/Screens/RetailerScreen.jsx":"23","/Users/jim/Desktop/LIFY DEV/lify/src/Components/Retailer.jsx":"24","/Users/jim/Desktop/LIFY DEV/lify/src/Screens/RetailerProductScreen.jsx":"25","/Users/jim/Desktop/LIFY DEV/lify/src/Screens/LoginScreen.jsx":"26","/Users/jim/Desktop/LIFY DEV/lify/src/Components/FormContainer.jsx":"27","/Users/jim/Desktop/LIFY DEV/lify/src/Screens/ProfileScreen.jsx":"28","/Users/jim/Desktop/LIFY DEV/lify/src/Actions/userActions.js":"29","/Users/jim/Desktop/LIFY DEV/lify/src/Actions/orderActions.js":"30","/Users/jim/Desktop/LIFY DEV/lify/src/Reducers/userReducers.js":"31","/Users/jim/Desktop/LIFY DEV/lify/src/Reducers/orderReducers.js":"32","/Users/jim/Desktop/LIFY DEV/lify/src/Screens/RegisterScreenTwo.jsx":"33","/Users/jim/Desktop/LIFY DEV/lify/src/Screens/RegisterScreen.jsx":"34","/Users/jim/Desktop/LIFY DEV/lify/src/Reducers/cartReducer.js":"35","/Users/jim/Desktop/LIFY DEV/lify/src/Actions/cartActions.js":"36","/Users/jim/Desktop/LIFY DEV/lify/src/Components/RegisterProgressBar.jsx":"37","/Users/jim/Desktop/LIFY DEV/lify/src/Screens/CartScreen.jsx":"38","/Users/jim/Desktop/LIFY DEV/lify/src/Screens/ReviewOrderScreen.jsx":"39","/Users/jim/Desktop/LIFY DEV/lify/src/Components/CheckoutProgressBar.jsx":"40","/Users/jim/Desktop/LIFY DEV/lify/src/Screens/PaymentScreen.jsx":"41","/Users/jim/Desktop/LIFY DEV/lify/src/PaymentWidgets/CreditCardForm.jsx":"42","/Users/jim/Desktop/LIFY DEV/lify/src/PaymentWidgets/Field.jsx":"43","/Users/jim/Desktop/LIFY DEV/lify/src/Components/Tick.jsx":"44","/Users/jim/Desktop/LIFY DEV/lify/src/Screens/OrderScreen.jsx":"45","/Users/jim/Desktop/LIFY DEV/lify/src/Screens/RetailerOrdersScreen.jsx":"46","/Users/jim/Desktop/LIFY DEV/lify/src/Screens/RetailerOrderReviewScreen.jsx":"47","/Users/jim/Desktop/LIFY DEV/lify/src/Screens/AboutScreen.jsx":"48"},{"size":913,"mtime":1621781722478,"results":"49","hashOfConfig":"50"},{"size":2519,"mtime":1622671054161,"results":"51","hashOfConfig":"50"},{"size":5064,"mtime":1620333302117,"results":"52","hashOfConfig":"50"},{"size":364,"mtime":1620333302116,"results":"53","hashOfConfig":"50"},{"size":2524,"mtime":1622634902560,"results":"54","hashOfConfig":"50"},{"size":5169,"mtime":1622671066915,"results":"55","hashOfConfig":"50"},{"size":462,"mtime":1621790492071,"results":"56","hashOfConfig":"50"},{"size":1251,"mtime":1621782382484,"results":"57","hashOfConfig":"50"},{"size":4697,"mtime":1622548327058,"results":"58","hashOfConfig":"50"},{"size":2333,"mtime":1622467154893,"results":"59","hashOfConfig":"50"},{"size":1043,"mtime":1622641320419,"results":"60","hashOfConfig":"50"},{"size":230,"mtime":1621973221502,"results":"61","hashOfConfig":"50"},{"size":2678,"mtime":1622462979339,"results":"62","hashOfConfig":"50"},{"size":3843,"mtime":1622484490696,"results":"63","hashOfConfig":"50"},{"size":6158,"mtime":1622466906890,"results":"64","hashOfConfig":"50"},{"size":790,"mtime":1622641340757,"results":"65","hashOfConfig":"50"},{"size":2244,"mtime":1622453518699,"results":"66","hashOfConfig":"50"},{"size":3297,"mtime":1622456711468,"results":"67","hashOfConfig":"50"},{"size":807,"mtime":1622453893990,"results":"68","hashOfConfig":"50"},{"size":981,"mtime":1622467012751,"results":"69","hashOfConfig":"50"},{"size":987,"mtime":1622453968985,"results":"70","hashOfConfig":"50"},{"size":278,"mtime":1621869623022,"results":"71","hashOfConfig":"50"},{"size":2382,"mtime":1622472794262,"results":"72","hashOfConfig":"50"},{"size":1004,"mtime":1622641347366,"results":"73","hashOfConfig":"50"},{"size":2563,"mtime":1622466930257,"results":"74","hashOfConfig":"50"},{"size":3040,"mtime":1622564452590,"results":"75","hashOfConfig":"50"},{"size":381,"mtime":1622467604103,"results":"76","hashOfConfig":"50"},{"size":9538,"mtime":1622656859270,"results":"77","hashOfConfig":"50"},{"size":6195,"mtime":1622539343418,"results":"78","hashOfConfig":"50"},{"size":5294,"mtime":1622484470073,"results":"79","hashOfConfig":"50"},{"size":2895,"mtime":1622534713358,"results":"80","hashOfConfig":"50"},{"size":3596,"mtime":1622473000109,"results":"81","hashOfConfig":"50"},{"size":5558,"mtime":1622562849123,"results":"82","hashOfConfig":"50"},{"size":5759,"mtime":1622562267865,"results":"83","hashOfConfig":"50"},{"size":1535,"mtime":1622634835758,"results":"84","hashOfConfig":"50"},{"size":1698,"mtime":1622645984445,"results":"85","hashOfConfig":"50"},{"size":607,"mtime":1622574601088,"results":"86","hashOfConfig":"50"},{"size":5906,"mtime":1622656182664,"results":"87","hashOfConfig":"50"},{"size":12500,"mtime":1622650952288,"results":"88","hashOfConfig":"50"},{"size":899,"mtime":1622645570392,"results":"89","hashOfConfig":"50"},{"size":3860,"mtime":1622645313985,"results":"90","hashOfConfig":"50"},{"size":13175,"mtime":1622672318822,"results":"91","hashOfConfig":"50"},{"size":883,"mtime":1622633659724,"results":"92","hashOfConfig":"50"},{"size":217,"mtime":1622640767612,"results":"93","hashOfConfig":"50"},{"size":9565,"mtime":1622670333442,"results":"94","hashOfConfig":"50"},{"size":9550,"mtime":1622669439717,"results":"95","hashOfConfig":"50"},{"size":9592,"mtime":1622669889814,"results":"96","hashOfConfig":"50"},{"size":974,"mtime":1622672242776,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"1mdqqpq",{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"100"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"100"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"100"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"100"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"100"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"100"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"100"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"100"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/jim/Desktop/LIFY DEV/lify/src/index.js",[],["204","205"],"/Users/jim/Desktop/LIFY DEV/lify/src/App.js",[],"/Users/jim/Desktop/LIFY DEV/lify/src/serviceWorkerRegistration.js",[],"/Users/jim/Desktop/LIFY DEV/lify/src/reportWebVitals.js",[],"/Users/jim/Desktop/LIFY DEV/lify/src/store.js",[],"/Users/jim/Desktop/LIFY DEV/lify/src/Components/Header.jsx",["206"],"/Users/jim/Desktop/LIFY DEV/lify/src/Components/Footer.jsx",[],"/Users/jim/Desktop/LIFY DEV/lify/src/Components/Search.jsx",[],["207","208"],"/Users/jim/Desktop/LIFY DEV/lify/src/Screens/HomeScreen.jsx",[],"/Users/jim/Desktop/LIFY DEV/lify/src/Screens/StoreScreen.jsx",[],"/Users/jim/Desktop/LIFY DEV/lify/src/Components/Product.jsx",[],"/Users/jim/Desktop/LIFY DEV/lify/src/Components/Loader.jsx",[],"/Users/jim/Desktop/LIFY DEV/lify/src/Reducers/productReducers.js",[],"/Users/jim/Desktop/LIFY DEV/lify/src/Actions/productActions.js",[],"/Users/jim/Desktop/LIFY DEV/lify/src/Screens/ProductScreen.jsx",[],"/Users/jim/Desktop/LIFY DEV/lify/src/Components/Town.jsx",[],"/Users/jim/Desktop/LIFY DEV/lify/src/Reducers/retailerReducers.js",[],"/Users/jim/Desktop/LIFY DEV/lify/src/Actions/retailerActions.js",[],"/Users/jim/Desktop/LIFY DEV/lify/src/Reducers/townReducers.js",[],"/Users/jim/Desktop/LIFY DEV/lify/src/Screens/TownScreen.jsx",[],"/Users/jim/Desktop/LIFY DEV/lify/src/Actions/townActions.js",[],"/Users/jim/Desktop/LIFY DEV/lify/src/Components/Message.jsx",[],"/Users/jim/Desktop/LIFY DEV/lify/src/Screens/RetailerScreen.jsx",[],"/Users/jim/Desktop/LIFY DEV/lify/src/Components/Retailer.jsx",[],"/Users/jim/Desktop/LIFY DEV/lify/src/Screens/RetailerProductScreen.jsx",[],"/Users/jim/Desktop/LIFY DEV/lify/src/Screens/LoginScreen.jsx",["209"],"import React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Form, Button, Row, Col, FormControl } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { login } from '../Actions/userActions'\nimport FormContainer from '../Components/FormContainer'\nimport Message from '../Components/Message'\nimport Loader from '../Components/Loader'\n\n\n\nconst LoginScreen = ({ location, history }) => {\n\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n\n    const dispatch = useDispatch()\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { loading, error, userInfo } = userLogin\n\n    const redirect = location.search ? location.search.split('=')[1] : '/'\n\n    useEffect(() => {\n        if (userInfo) {\n            history.push('/profile')\n        }\n    }, [history, userInfo, redirect])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(login(email, password))\n\n    }\n\n    const btnStyle = {\n        display: 'block',\n        backgroundColor: 'black',\n        color: 'white',\n        fontFamily: 'arial',\n        letterSpacing: '0.2rem',\n        borderRadius: \"0\",\n        alignItems: 'center',\n        justifyContent: 'center',\n        textDecoration: 'none',\n        display: 'block'\n    }\n\n    return (\n        <FormContainer>\n            <h2 className=\"shop-header-large py-3 text-center\">sign in!</h2>\n            <h4 className=\"shop-header  text-center\">access your account with your email and password</h4>\n            {error && <Message variant={'danger'}>{error}</Message>}\n            {loading && <Loader />}\n            <Form onSubmit={submitHandler}>\n                <Form.Group controlId='email'>\n                    <Form.Label>Email</Form.Label>\n                    <FormControl\n                        type='email'\n                        placeholder='Enter email...'\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                    ></FormControl>\n                </Form.Group>\n\n                <Form.Group controlId='password'>\n                    <Form.Label>Password</Form.Label>\n                    <FormControl\n                        type='password'\n                        placeholder='Enter password...'\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    ></FormControl>\n                </Form.Group>\n                <Button\n                    type='submit'\n                    style={btnStyle}\n                    className=\"w-100 my-3\">Sign In\n                    </Button>\n\n\n            </Form>\n            <Row className=\"py-1\">\n                <Col>\n                    <Link to='/register'>\n                        <div className=\"text-center shop-link-lg py-4\">or register here!</div>\n                    </Link>\n                </Col>\n\n            </Row>\n\n        </FormContainer>\n    )\n}\n\nexport default LoginScreen\n","/Users/jim/Desktop/LIFY DEV/lify/src/Components/FormContainer.jsx",[],"/Users/jim/Desktop/LIFY DEV/lify/src/Screens/ProfileScreen.jsx",["210","211"],"import React, { useState, useEffect } from 'react'\nimport { Form, Button, Row, Col, FormControl, Table, Container } from 'react-bootstrap'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getUserDetails, updateUserProfile, logout } from '../Actions/userActions'\nimport { listMyOrders } from '../Actions/orderActions'\nimport Loader from '../Components/Loader'\nimport Message from '../Components/Message'\n\n\n\n\n\nconst ProfileScreen = ({ location, history }) => {\n\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [address, setAddress] = useState('')\n    const [phone, setPhone] = useState('')\n    const [confirmPassword, setConfirmPassword] = useState('')\n    const [message, setMessage] = useState(null)\n\n    const dispatch = useDispatch()\n\n    const userDetails = useSelector(state => state.userDetails)\n    const { loading, error, user } = userDetails\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n    const userUpdateProfile = useSelector(state => state.userUpdateProfile)\n    const { success } = userUpdateProfile\n\n    const orderListMy = useSelector(state => state.orderListMy)\n    const { orders, loading: loadingOrders, error: errorOrders } = orderListMy\n\n\n\n    useEffect(() => {\n\n        if (!userInfo || userInfo.length === 0) {\n\n            history.push('/register')\n        }\n\n\n        if (error) {\n            console.log(error)\n            //dispatch(logout())\n            //history.push('/login')\n        }\n\n        if (!user || !user.name || success) {\n            dispatch({ type: 'USER_UPDATE_PROFILE_RESET' })\n            dispatch(getUserDetails('profile'))\n            dispatch(listMyOrders())\n        } else {\n            setName(user.name)\n            setEmail(user.email)\n            setAddress(user.address)\n            setPhone(user.phone)\n        }\n\n\n    }, [dispatch, history, userInfo, user, success, error])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        if (password !== confirmPassword) {\n            setMessage('Passwords do not match!')\n        } else {\n            dispatch(updateUserProfile({ id: user._id, name, email, password, address, phone }))\n\n        }\n    }\n\n    const btnStyle = {\n        display: 'block',\n        backgroundColor: 'black',\n        color: 'white',\n        fontFamily: 'arial',\n        letterSpacing: '0.2rem',\n        borderRadius: \"0\",\n        alignItems: 'center',\n        justifyContent: 'center',\n        textDecoration: 'none',\n        display: 'block'\n    }\n\n    return <>\n\n        <img className=\"w-100\" src={\"images/account.jpg\"} alt=\"account banner\"></img>\n\n\n        <Container >\n            <Row>\n                <Col className=\"justify-content-center\" xs={12}>\n                    <h2 className=\"shop-header-large py-3 text-center\">your recent orders</h2>\n                    <br></br>\n                    {loadingOrders ? <Loader /> : errorOrders ? <Message variant='danger'>{errorOrders}</Message> : (\n\n                        <Table striped borded hover responsive className=\"table-sm\">\n                            <thead>\n                                <tr>\n                                    <th>Order Ref</th>\n                                    <th>Date</th>\n                                    <th>Total</th>\n\n                                    <th>type</th>\n                                    <th>Review Order</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {orders.map((order) => (\n                                    <tr key={order._id}>\n                                        <td>{(order._id).slice(-6)}</td>\n                                        <td>{order.createdAt.substring(0, 10)}</td>\n                                        <td><b>£{order.totalPrice}</b></td>\n                                        <td>{order.isCollection ? <p>\n                                            collection\n                                        </p> : <p>\n                                            delivery\n                                        </p>}</td>\n                                        <td>\n                                            <LinkContainer to={`/order/${order._id}`}>\n                                                <Button variant='primary' className=\"rounded\">Details</Button>\n                                            </LinkContainer>\n                                        </td>\n                                    </tr>\n                                ))}\n\n\n\n                            </tbody>\n\n                        </Table>\n\n                    )}\n                    {orders ? (orders.length === 0 && <Message className=\"w-100\" variant=\"info\">no orders yet!</Message>) : (<Loader />)}\n                </Col>\n            </Row>\n\n            <Row>\n                <h2 className=\"shop-header-large py-3 text-center\">need to speak to someone?</h2>\n                <Col className=\"text-center my-3\" xs={6}> <div style={btnStyle} className=\"btn\">problem with an order</div> </Col>\n                <Col className=\"text-center my-3\" xs={6}> <div style={btnStyle} className=\"btn\">wheres my stuff?</div> </Col>\n                <Col className=\"text-center my-3\" xs={6}> <div style={btnStyle} className=\"btn\">can i deliver too? </div> </Col>\n                <Col className=\"text-center my-3\" xs={6}> <div style={btnStyle} className=\"btn\">or something else</div> </Col>\n            </Row>\n            <Row>\n\n                <Col md={12}>\n                    <h2 className=\"shop-header-large py-3 text-center\">details changed?</h2>\n                    <h4 className=\"shop-header  text-center\">view and update details here</h4>\n                    {error && <Message variant='danger'>{errorOrders}</Message>}\n                    {message && <Message variant='danger'>{message}</Message>}\n                    {success && <Message variant='success'>Profile Updated!</Message>}\n                    {loading && <Loader />}\n                    <Form onSubmit={submitHandler}>\n                        <Form.Group controlId='name'>\n                            <Form.Label>Update Account Name</Form.Label>\n                            <FormControl\n                                type='name'\n                                placeholder='Enter name...'\n                                value={name}\n                                onChange={(e) => setName(e.target.value)}\n                            ></FormControl>\n                        </Form.Group>\n                        <Form.Group controlId='email'>\n                            <Form.Label>Update Account Email</Form.Label>\n                            <FormControl\n                                type='email'\n                                placeholder='Enter email...'\n                                value={email}\n                                onChange={(e) => setEmail(e.target.value)}\n                            ></FormControl>\n                        </Form.Group>\n\n                        <Form.Group controlId='phone'>\n                            <Form.Label>Update Account Phone</Form.Label>\n                            <FormControl\n                                type='phone'\n                                placeholder='Enter Phone Number...'\n                                value={phone}\n                                onChange={(e) => setPhone(e.target.value)}\n                            ></FormControl>\n                        </Form.Group>\n\n                        <Form.Group controlId='address'>\n                            <Form.Label>Update Account Address</Form.Label>\n                            <FormControl\n                                type='address'\n                                placeholder='Enter email...'\n                                value={address}\n                                onChange={(e) => setAddress(e.target.value)}\n                            ></FormControl>\n                        </Form.Group>\n\n                        <Form.Group controlId='password'>\n                            <Form.Label>Update Password</Form.Label>\n                            <FormControl\n                                type='password'\n                                placeholder='Enter password...'\n                                value={password}\n                                onChange={(e) => setPassword(e.target.value)}\n                            ></FormControl>\n                        </Form.Group>\n                        <Form.Group controlId='confirmPassword'>\n                            <Form.Label>Confirm Updated Password</Form.Label>\n                            <FormControl\n                                type='password'\n                                placeholder='Confirm password...'\n                                value={confirmPassword}\n                                onChange={(e) => setConfirmPassword(e.target.value)}\n                            ></FormControl>\n                        </Form.Group>\n                        <Button\n                            style={btnStyle}\n                            type='submit'\n                            className=\"w-100 btn block my-2\"\n                            block\n                        >Save!</Button>\n\n\n                    </Form>\n\n                </Col>\n\n\n            </Row>\n        </Container>\n    </>\n}\n\nexport default ProfileScreen","/Users/jim/Desktop/LIFY DEV/lify/src/Actions/userActions.js",[],"/Users/jim/Desktop/LIFY DEV/lify/src/Actions/orderActions.js",[],"/Users/jim/Desktop/LIFY DEV/lify/src/Reducers/userReducers.js",[],"/Users/jim/Desktop/LIFY DEV/lify/src/Reducers/orderReducers.js",[],"/Users/jim/Desktop/LIFY DEV/lify/src/Screens/RegisterScreenTwo.jsx",["212","213","214","215","216"],"import React, { useState, useEffect } from 'react'\nimport { Form, Button, Row, Col, FormControl } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { register, logout } from '../Actions/userActions'\nimport FormContainer from '../Components/FormContainer'\nimport RegisterProgressBar from '../Components/RegisterProgressBar'\nimport Message from '../Components/Message'\nimport Loader from '../Components/Loader'\n\n\nconst RegisterScreen = ({ location, history }) => {\n\n\n    const cart = useSelector(state => state.cart)\n    const { shippingAddress } = cart\n\n    const [name, setName] = useState(shippingAddress.name)\n    const [email, setEmail] = useState(shippingAddress.email)\n\n\n    const [streetAddress, setStreetAddress] = useState(shippingAddress.streetAddress)\n    const [town, setTown] = useState(shippingAddress.town)\n    const [county, setCounty] = useState(shippingAddress.county)\n    const [postcode, setPostcode] = useState(shippingAddress.postcode)\n    const [address, setAddress] = useState('')\n\n\n    const [phone, setPhone] = useState('')\n    const [password, setPassword] = useState('')\n    const [confirmPassword, setConfirmPassword] = useState('')\n\n\n\n\n\n\n\n    const [message, setMessage] = useState(null)\n\n    const dispatch = useDispatch()\n\n    const userRegister = useSelector(state => state.userRegister)\n    const { loading, error, userInfo } = userRegister\n\n\n\n\n\n    useEffect(() => {\n\n        if (userInfo) {\n            history.push('/profile')\n        }\n    }, [history, userInfo, shippingAddress])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        if (password !== confirmPassword) {\n            setMessage('Passwords do not match!')\n        } else {\n\n            setAddress(`${streetAddress}, ${town}, ${county}, ${postcode}`)\n            dispatch(register(name, email, password, address, phone))\n            //history.push('/profile')\n        }\n    }\n\n    const clearuserData = () => {\n        localStorage.removeItem('userInfo')\n        dispatch(logout())\n        history.push('/login')\n    }\n\n    const btnStyle = {\n        display: 'block',\n        backgroundColor: 'black',\n        color: 'white',\n        fontFamily: 'arial',\n        letterSpacing: '0.2rem',\n        borderRadius: \"0\",\n        alignItems: 'center',\n        justifyContent: 'center',\n        textDecoration: 'none',\n\n    }\n\n    return (\n        <FormContainer>\n            <h2 className=\"shop-header-large py-3 text-center\">almost there!</h2>\n            <RegisterProgressBar val={80} />\n\n            <h4 className=\"shop-header py-2 text-center\">check details and provide a password</h4>\n\n\n\n            <Form onSubmit={submitHandler}>\n\n                <Form.Group controlId='email'>\n                    <Form.Label>Email</Form.Label>\n                    <FormControl\n                        type='email'\n                        placeholder='Enter email...'\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                    ></FormControl>\n                </Form.Group>\n\n                <Form.Group controlId='address'>\n                    <Form.Label>Address</Form.Label>\n                    <FormControl\n                        type='address'\n                        placeholder='Enter address...'\n                        value={`${streetAddress}, ${town}, ${county}, ${postcode}`}\n                        onChange={(e) => setAddress(e.target.value)}\n                    ></FormControl>\n                </Form.Group>\n\n\n                <Form.Group controlId='phone'>\n                    <Form.Label>Phone</Form.Label>\n                    <FormControl\n                        type='phone'\n                        placeholder='Enter phone number...'\n                        value={phone}\n                        onChange={(e) => setPhone(e.target.value)}\n                    ></FormControl>\n                </Form.Group>\n\n\n                <Form.Group controlId='password'>\n                    <Form.Label>Password</Form.Label>\n                    <FormControl\n                        type='password'\n                        placeholder='Enter password...'\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    ></FormControl>\n                </Form.Group>\n                <Form.Group controlId='confirmPassword'>\n                    <Form.Label>Confirm Password</Form.Label>\n                    <FormControl\n                        type='password'\n                        placeholder='Confirm password...'\n                        value={confirmPassword}\n                        onChange={(e) => setConfirmPassword(e.target.value)}\n                    ></FormControl>\n                </Form.Group>\n                <Form.Group className=\"py-2\">\n                    {error && <Message className=\"py-2\" variant='danger'>{error}</Message>}\n                    {message && <Message className=\"py-2\" variant='danger'>{message}</Message>}\n                    {loading && <Loader />}\n                </Form.Group>\n                <Button\n                    type='submit'\n                    className=\"w-100\"\n                    style={btnStyle}\n                >sign up and sign in</Button>\n\n\n            </Form>\n\n            <Row>\n\n                <Col>\n                    <div onClick={clearuserData} className=\"text-center shop-link-lg my-5 py-1\">or login here!</div>\n\n\n                </Col>\n            </Row>\n\n\n        </FormContainer>\n    )\n}\n\nexport default RegisterScreen\n","/Users/jim/Desktop/LIFY DEV/lify/src/Screens/RegisterScreen.jsx",["217","218","219"],"import React, { useState, useEffect } from 'react'\nimport { Form, Button, Row, Col, FormControl } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { logout } from '../Actions/userActions'\nimport { saveShippingAddress } from '../Actions/cartActions'\nimport FormContainer from '../Components/FormContainer'\nimport Message from '../Components/Message'\n\n\nconst RegisterScreen = ({ location, history }) => {\n\n\n\n    const cart = useSelector(state => state.cart)\n    const { shippingAddress } = cart\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n\n\n    const [streetAddress, setStreetAddress] = useState('')\n    const [town, setTown] = useState('')\n    const [county, setCounty] = useState('')\n    const [postcode, setPostcode] = useState('')\n\n    const [message, setMessage] = useState(null)\n\n    const dispatch = useDispatch()\n\n    const userRegister = useSelector(state => state.userRegister)\n    const { error, userInfo } = userRegister\n\n\n    useEffect(() => {\n        if (userInfo) {\n            history.push('/account')\n        }\n    }, [history, userInfo])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n\n        if (name === '') {\n            setMessage('An account owner needs a name!')\n        }\n        else if (email === '') {\n            setMessage('You must provide a unique email!')\n        }\n        else if (streetAddress === '') {\n            setMessage('You must provide a street address!')\n        }\n        else if (town === '') {\n            setMessage('You must provide a town')\n        }\n        else if (county === '') {\n            setMessage('You must provide a county!')\n        }\n        else if (postcode === '') {\n            setMessage('You must provide a valid postcode!')\n        }\n        else {\n\n            dispatch(saveShippingAddress({ name, email, streetAddress, town, county, postcode }))\n            history.push('/register/complete')\n        }\n\n\n    }\n\n    const clearuserData = () => {\n        localStorage.removeItem('userInfo')\n        dispatch(logout())\n        history.push('/login')\n    }\n\n    const btnStyle = {\n        display: 'block',\n        backgroundColor: 'black',\n        color: 'white',\n        fontFamily: 'arial',\n        letterSpacing: '0.2rem',\n        borderRadius: \"0\",\n        alignItems: 'center',\n        justifyContent: 'center',\n        textDecoration: 'none',\n        display: 'block'\n    }\n\n\n    return (\n        <FormContainer>\n            <h2 className=\"shop-header-large py-3 text-center\">sign up!</h2>\n            <h4 className=\"shop-header  text-center\">create an account to purchase and track orders</h4>\n\n            <Form onSubmit={submitHandler}>\n                <Form.Group controlId='name'>\n                    <Form.Label>Name</Form.Label>\n                    <FormControl\n                        type='name'\n                        placeholder='Enter name...'\n                        value={name}\n                        onChange={(e) => setName(e.target.value)}\n                    ></FormControl>\n                </Form.Group>\n                <Form.Group controlId='email'>\n                    <Form.Label>Email</Form.Label>\n                    <FormControl\n                        type='email'\n                        placeholder='Enter email...'\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                    ></FormControl>\n                </Form.Group>\n\n\n\n                <Form.Group controlId='streetAddress'>\n                    <Form.Label>Street Address</Form.Label>\n                    <FormControl\n                        type='streetAddress'\n                        placeholder='Enter street address...'\n                        value={streetAddress}\n                        onChange={(e) => setStreetAddress(e.target.value)}\n                    ></FormControl>\n                </Form.Group>\n\n                <Form.Group controlId='town'>\n                    <Form.Label>Town</Form.Label>\n                    <FormControl\n                        type='town'\n                        placeholder='Enter town...'\n                        value={town}\n                        onChange={(e) => setTown(e.target.value)}\n                    ></FormControl>\n                </Form.Group>\n\n                <Form.Group controlId='county'>\n                    <Form.Label>County</Form.Label>\n                    <FormControl\n                        type='county'\n                        placeholder='Enter county...'\n                        value={county}\n                        onChange={(e) => setCounty(e.target.value)}\n                    ></FormControl>\n                </Form.Group>\n\n\n                <Form.Group controlId='postcode'>\n                    <Form.Label>Postcode</Form.Label>\n                    <FormControl\n                        type='postcode'\n                        placeholder='Enter postcode...'\n                        value={postcode}\n                        onChange={(e) => setPostcode(e.target.value)}\n                    ></FormControl>\n                </Form.Group>\n\n                <Form.Group className='my-2 text-center'>\n                    {message && <Message variant='danger'>{message}</Message>}\n                </Form.Group>\n\n                <Button\n                    type='submit'\n                    className=\"w-100\"\n                    style={btnStyle}\n                >Register</Button>\n\n\n            </Form>\n\n            <Row>\n\n                <Col>\n                    <div onClick={clearuserData} className=\"text-center shop-link-lg my-5 py-1\">or login here!</div>\n\n\n                </Col>\n            </Row>\n\n\n        </FormContainer>\n    )\n}\n\nexport default RegisterScreen\n","/Users/jim/Desktop/LIFY DEV/lify/src/Reducers/cartReducer.js",[],"/Users/jim/Desktop/LIFY DEV/lify/src/Actions/cartActions.js",[],"/Users/jim/Desktop/LIFY DEV/lify/src/Components/RegisterProgressBar.jsx",[],"/Users/jim/Desktop/LIFY DEV/lify/src/Screens/CartScreen.jsx",["220","221"],"import React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Row, Col, ListGroupItem, Image, Form, Button, ListGroup, Card, Container } from 'react-bootstrap'\nimport { addToCart, removeFromCart } from '../Actions/cartActions'\n\n\nconst CartScreen = ({ match, location, history }) => {\n\n    const productId = match.params.id\n\n    //whatever is in the url after the ? will store in qty\n    const qty = location.search ? Number(location.search.split('=')[1]) : 1\n    //console.log(qty)\n\n    const dispatch = useDispatch()\n\n    const cart = useSelector(state => state.cart)\n    const userInfo = useSelector(state => state.userLogin.userInfo)\n\n\n\n    useEffect(() => {\n        if (productId) {\n            dispatch(addToCart(productId, qty))\n        }\n    }, [dispatch, productId, qty])\n\n    const removeFromCartHandler = (id) => {\n        dispatch(removeFromCart(id))\n    }\n\n    const checkOutHandler = () => {\n\n        if (!userInfo || userInfo.length === 0) {\n\n            history.push('/register')\n        }\n        else {\n            history.push('/review/order')\n        }\n    }\n\n    const goBack = () => {\n        history.goBack()\n    }\n\n    const btnStyle = {\n        display: 'block',\n        backgroundColor: 'black',\n        color: 'white',\n        fontFamily: 'arial',\n        letterSpacing: '0.2rem',\n        borderRadius: \"0\",\n        alignItems: 'center',\n        justifyContent: 'center',\n        textDecoration: 'none',\n        display: 'block'\n    }\n\n    return (\n        <>\n            <Row className=\"justify-content-center\">\n\n                <Col xs={8}>\n\n                    <p className=\"checkout-text my-3\">Not done? <Link className=\"underline shop-link-lg my-3\" onClick={goBack}>Continue Shopping</Link></p>\n                </Col>\n            </Row>\n            <Row className=\"justify-content-center\">\n\n                <Col xs={10}>\n\n                    <h2 className=\"shop-header-large py-3 text-center\">my basket</h2>\n                    {cart.cartItems.length === 0 ? (<h2 className=\"shop-header-large py-3 text-center\">Your basket is empty!<Link className=\"btn btn-outline-primary rounded mx-3\" onClick={goBack}>Back to Shop?</Link></h2>\n                    ) : (\n                        <ListGroup variant=\"flush\">\n\n                            {cart.cartItems.map(item => (\n                                <ListGroupItem key={item.product}>\n                                    <Row>\n                                        <Col xs={2} md={3}>\n                                            <Image src={item.image} alt={item.name} fluid rounded />\n                                        </Col>\n                                        <Col xs={2} md={3}>\n                                            <h3 className=\"checkout-link-lg mt-4\" ><Link to={`/product/${item.product}`}>{item.name}</Link></h3>\n                                        </Col>\n                                        <Col xs={2} md={2}>\n                                            <p className=\"checkout-text-lg mt-4\">£{item.price}</p>\n                                        </Col>\n                                        <Col xs={2} md={2}>\n                                            <Form.Control className=\"mt-3\" as='select' value={item.qty} onChange={(e) => dispatch(addToCart(item.product, Number(e.target.value)))}>\n                                                {\n                                                    [...Array(item.stock).keys()].map(x => (\n                                                        <option key={x + 1} value={x + 1}> {x + 1}</option>\n                                                    ))\n                                                }\n                                            </Form.Control>\n                                        </Col>\n                                        <Col xs={2} md={2}>\n                                            <Button\n                                                type=\"button\"\n                                                style={btnStyle}\n                                                className=\"btn mt-4 p-1 w-100\"\n                                                onClick={() => removeFromCartHandler(item.product)}>\n\n                                                X\n                                             </Button>\n                                        </Col>\n                                    </Row>\n                                </ListGroupItem>\n\n                            ))}\n\n\n\n                        </ListGroup>\n\n                    )\n\n\n                    }\n                </Col>\n            </Row>\n\n            <Row className=\"justify-content-center\">\n                <Col xs={10} md={8}>\n                    <Card className=\"mt-3 rounded\">\n                        <ListGroup variant='flush'>\n                            <ListGroupItem>\n                                <h3 className=\"shop-header-large py-3 text-center\">Subtotal ({cart.cartItems.reduce((acc, item) => acc + item.qty, 0)}) Items: £{cart.cartItems.reduce((acc, item) => acc + item.qty * item.price, 0).toFixed(2)}</h3>\n                                <p></p>\n\n                            </ListGroupItem>\n                            <ListGroupItem>\n\n                                <Button\n                                    style={btnStyle}\n                                    type=\"button\"\n                                    className=\" w-100\"\n                                    disabled={cart.cartItems.length === 0}\n                                    onClick={checkOutHandler}\n                                >Proceed to Checkout!</Button>\n\n\n                            </ListGroupItem>\n\n                        </ListGroup>\n                    </Card>\n                </Col>\n\n            </Row >\n        </>\n    )\n}\n\nexport default CartScreen","/Users/jim/Desktop/LIFY DEV/lify/src/Screens/ReviewOrderScreen.jsx",["222","223","224","225","226","227","228","229"],"import React, { useEffect, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Row, Col, ListGroupItem, Image, Form, Button, ListGroup, Card, Container, FormControl } from 'react-bootstrap'\nimport { saveShippingAddress, addToCart, removeFromCart, createOrder } from '../Actions/cartActions'\nimport CheckoutProgressBar from '../Components/CheckoutProgressBar'\nimport FormContainer from '../Components/FormContainer'\nimport Message from '../Components/Message'\n\nimport DatePicker from 'react-date-picker'\n\n\nconst ReviewOrderScreen = ({ match, location, history }) => {\n\n    const productId = match.params.id\n\n    //whatever is in the url after the ? will store in qty\n    const qty = location.search ? Number(location.search.split('=')[1]) : 1\n    //console.log(qty)\n\n    const dispatch = useDispatch()\n\n    const cart = useSelector(state => state.cart)\n    const userInfo = useSelector(state => state.userLogin.userInfo)\n\n\n    const { shippingAddress } = cart\n    const { cartItems } = cart\n    const [name, setName] = useState(userInfo.name)\n    const [email, setEmail] = useState(userInfo.email)\n    const [address, setAddress] = useState(userInfo.address)\n\n    const [streetAddress, setStreetAddress] = useState()\n    const [town, setTown] = useState()\n    const [county, setCounty] = useState()\n    const [postcode, setPostcode] = useState()\n    const [delivery, setDelivery] = useState(true)\n    const [deliveryFee, setDeliveryFee] = useState(0)\n    const [startDate, setStartDate] = useState(new Date())\n\n    const [message, setMessage] = useState(null)\n\n\n\n    useEffect(() => {\n        //setMessage('Basket Empty!')\n        setStartDate(new Date(Date.now() + (3600 * 1000 * 24)))\n\n        if (productId) {\n            dispatch(addToCart(productId, qty))\n        }\n\n        if (userInfo) {\n            const addressData = address.split(',')\n            setStreetAddress(addressData[0])\n            setTown(addressData[1])\n            setCounty(addressData[2])\n            setPostcode(addressData[3])\n        }\n\n        //alert(delivery)\n\n    }, [dispatch, userInfo, productId, qty, delivery])\n\n\n\n    const removeFromCartHandler = (id) => {\n        dispatch(removeFromCart(id))\n    }\n\n    const deliveryOption = () => {\n        if (delivery) {\n            setDelivery(false)\n            setDeliveryFee(0)\n        }\n        else {\n\n            setDelivery(true)\n            setDeliveryFee(4)\n        }\n    }\n    const checkOutHandler = () => {\n\n        if (userInfo.length === 0 || !userInfo) {\n\n            history.push('/register')\n        }\n        else {\n            history.push('/checkout')\n        }\n    }\n\n\n\n\n    const submitHandler = () => {\n        let billingAddress = `${streetAddress}, ${town}, ${county}`\n        const totalPrice = Number(cart.cartItems.reduce((acc, item) => acc + item.qty * item.price, 0) + deliveryFee + 3).toFixed(2)\n        let PostCode = `${postcode}`\n        dispatch(saveShippingAddress({ name, email, billingAddress, delivery, deliveryFee, startDate }))\n        dispatch(createOrder({ name, email, billingAddress, PostCode, totalPrice, cartItems, delivery, deliveryFee }))\n\n        history.push('/review/order/pay')\n    }\n\n    const goBack = () => {\n        history.goBack()\n    }\n\n    const btnStyle = {\n        display: 'block',\n        backgroundColor: 'black',\n        color: 'white',\n        fontFamily: 'arial',\n        letterSpacing: '0.2rem',\n        borderRadius: \"0\",\n        alignItems: 'center',\n        justifyContent: 'center',\n        textDecoration: 'none',\n        display: 'block'\n    }\n\n    return (\n        <>\n            <Container>\n                <Row className=\"justify-content-center\">\n                    <Col xs={10}>\n                        <CheckoutProgressBar val={60} />\n                    </Col>\n                </Row>\n            </Container>\n            <Row className=\"justify-content-center\" >\n\n                <Col xs={10}>\n\n                    <h2 className=\"shop-header-large py-3 text-center\">review order</h2>\n                    {cart.cartItems.length === 0 ? (<h2>Your basket is empty!<Link className=\"btn btn-warning rounded mx-3\" onClick={goBack}>Back to Shop?</Link></h2>\n                    ) : (\n                        <ListGroup variant=\"flush\">\n\n                            {cart.cartItems.map(item => (\n                                <ListGroupItem key={item.product}>\n                                    <Row>\n                                        <Col xs={3} md={3}>\n                                            <Image src={item.image} alt={item.name} fluid rounded />\n                                        </Col>\n                                        <Col xs={3} md={3}>\n                                            <h3 className=\"checkout-link-lg mt-4\" ><Link to={`/product/${item.product}`}>{item.name}</Link></h3>\n                                        </Col>\n                                        <Col xs={2} md={2}>\n                                            <p className=\"checkout-text-lg mt-4\">£{item.price}</p>\n                                        </Col>\n                                        <Col xs={2} md={2}>\n                                            <Form.Control className=\"mt-3\" as='select' value={item.qty} onChange={(e) => dispatch(addToCart(item.product, Number(e.target.value)))}>\n                                                {\n                                                    [...Array(item.stock).keys()].map(x => (\n                                                        <option key={x + 1} value={x + 1}> {x + 1}</option>\n                                                    ))\n                                                }\n                                            </Form.Control>\n                                        </Col>\n                                        <Col xs={2} md={2}>\n                                            <Button\n                                                type=\"button\"\n                                                style={btnStyle}\n                                                className=\"btn mt-4 p-1 w-100\"\n                                                onClick={() => removeFromCartHandler(item.product)}>\n\n                                                X\n                                             </Button>\n                                        </Col>\n                                    </Row>\n                                </ListGroupItem>\n\n                            ))}\n\n\n                            <ListGroupItem>\n                                <p className=\"checkout-text py-1\">Not done?</p>\n                                <Link style={btnStyle} className=\"btn mx-3\" onClick={goBack}>Continue Shopping</Link>\n                            </ListGroupItem>\n                        </ListGroup>\n\n                    )\n\n\n                    }\n                </Col>\n            </Row>\n            <Row className=\"justify-content-center\">\n\n                <Col className=\"text-center\" xs={8}>\n\n\n                    <h3 className=\"shop-header py-3\">Subtotal ({cart.cartItems.reduce((acc, item) => acc + item.qty, 0)}) Items: £{cart.cartItems.reduce((acc, item) => acc + item.qty * item.price, 0).toFixed(2)}</h3>\n\n\n                </Col>\n            </Row>\n\n            <Row>\n                <Container>\n                    <FormContainer>\n                        <h2 className=\"shop-header-large py-3 text-center\">confirm shipping/billing</h2>\n                        <h4 className=\"checkout-text text-center\">this is your billing and shipping address</h4>\n\n                        <Form onSubmit={submitHandler}>\n                            <Form.Group controlId='name'>\n                                <Form.Label>Name</Form.Label>\n                                <FormControl\n                                    type='name'\n                                    placeholder='Enter name...'\n                                    value={name}\n                                    onChange={(e) => setName(e.target.value)}\n                                ></FormControl>\n                            </Form.Group>\n\n\n\n                            <Form.Group controlId='streetAddress'>\n                                <Form.Label>Street Address</Form.Label>\n                                <FormControl\n                                    type='streetAddress'\n                                    placeholder='Enter street address...'\n                                    value={streetAddress}\n                                    onChange={(e) => setStreetAddress(e.target.value)}\n                                ></FormControl>\n                            </Form.Group>\n\n                            <Form.Group controlId='town'>\n                                <Form.Label>Town</Form.Label>\n                                <FormControl\n                                    type='town'\n                                    placeholder='Enter town...'\n                                    value={town}\n                                    onChange={(e) => setTown(e.target.value)}\n                                ></FormControl>\n                            </Form.Group>\n\n                            <Form.Group controlId='county'>\n                                <Form.Label>County</Form.Label>\n                                <FormControl\n                                    type='county'\n                                    placeholder='Enter county...'\n                                    value={county}\n                                    onChange={(e) => setCounty(e.target.value)}\n                                ></FormControl>\n                            </Form.Group>\n\n\n                            <Form.Group controlId='postcode'>\n                                <Form.Label>Postcode</Form.Label>\n                                <FormControl\n                                    type='postcode'\n                                    placeholder='Enter postcode...'\n                                    value={postcode}\n                                    onChange={(e) => setPostcode(e.target.value)}\n                                ></FormControl>\n                            </Form.Group>\n\n                            <Form.Group controlId='delivery'>\n                                <h4 className=\"checkout-text text-center py-3\">Collection or Delivery?</h4>\n                                <FormControl\n                                    type='delivery'\n                                    placeholder='Select delivery method...'\n                                    onChange={deliveryOption}\n                                    as=\"select\">\n                                    <option value=\"true\">collection</option>\n                                    <option value=\"false\">delivery</option>\n                                </FormControl>\n                            </Form.Group>\n\n                            <Form.Group>\n\n                                <DatePicker\n                                    className=\"w-100 py-3\"\n                                    onChange={setStartDate}\n                                    value={startDate}\n                                    minDate={startDate}\n                                    disableCalendar={false}\n                                    showLeadingZeros={true}\n                                />\n\n\n                            </Form.Group>\n                            <Form.Group >\n                                <Col className='my-2 text-right'>\n                                    <h2 className=\"shop-header py-3 \">Delivery fee: £{deliveryFee}</h2>\n                                    <h4 className=\"shop-text \">this is calculated at a flat rate</h4>\n                                </Col>\n\n\n                            </Form.Group>\n\n                            <Form.Group className='my-2 text-center'>\n                                {message && <Message variant='danger'>{message}</Message>}\n                            </Form.Group>\n\n                            <Button\n                                type='submit'\n                                className=\"w-100 mt-3\"\n                                style={btnStyle}\n                            >proceed to payment</Button>\n\n\n                        </Form>\n                    </FormContainer>\n                </Container>\n            </Row>\n\n\n\n\n\n        </>\n    )\n}\n\nexport default ReviewOrderScreen","/Users/jim/Desktop/LIFY DEV/lify/src/Components/CheckoutProgressBar.jsx",[],"/Users/jim/Desktop/LIFY DEV/lify/src/Screens/PaymentScreen.jsx",["230","231","232","233","234","235","236","237","238","239","240"],"import React, { useEffect, useState } from 'react'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Row, Col, Card, Container, } from 'react-bootstrap'\nimport { addToCart, removeFromCart } from '../Actions/cartActions'\nimport CheckoutProgressBar from '../Components/CheckoutProgressBar'\nimport FormContainer from '../Components/FormContainer'\nimport Message from '../Components/Message'\nimport DatePicker from 'react-date-picker'\n\n//stripe\nimport { Elements } from \"@stripe/react-stripe-js\"\nimport CreditCardForm from '../PaymentWidgets/CreditCardForm'\nimport { loadStripe } from \"@stripe/stripe-js\"\n\n\nconst PaymentScreen = ({ match, location, history }) => {\n\n    const productId = match.params.id\n\n    //whatever is in the url after the ? will store in qty\n    const qty = location.search ? Number(location.search.split('=')[1]) : 1\n    //console.log(qty)\n\n    const dispatch = useDispatch()\n\n    const cart = useSelector(state => state.cart)\n\n    const userInfo = useSelector(state => state.userLogin.userInfo)\n\n\n\n    const { shippingAddress } = cart\n\n\n    const [message, setMessage] = useState(null)\n\n\n\n    useEffect(() => {\n\n\n        if (productId) {\n            dispatch(addToCart(productId, qty))\n        }\n\n\n\n        //alert(delivery)\n\n    }, [dispatch, userInfo, productId, qty])\n\n\n\n    const removeFromCartHandler = (id) => {\n        dispatch(removeFromCart(id))\n    }\n\n\n    const checkOutHandler = () => {\n\n        if (userInfo.length === 0 || !userInfo) {\n\n            history.push('/register')\n        }\n        else {\n            history.push('/checkout')\n        }\n    }\n\n\n\n    const goBack = () => {\n        history.goBack()\n    }\n\n    const btnStyle = {\n        display: 'block',\n        backgroundColor: 'black',\n        color: 'white',\n        fontFamily: 'arial',\n        letterSpacing: '0.2rem',\n        borderRadius: \"0\",\n        alignItems: 'center',\n        justifyContent: 'center',\n        textDecoration: 'none',\n        display: 'block'\n    }\n\n    const cardStyle = {\n        border: 'none'\n    }\n\n    return (\n        <>\n            <Container>\n                <Row Row className=\"justify-content-center\">\n                    <h2 className=\"shop-header-large py-3 text-center\">almost there!</h2>\n                    <Col xs={10}>\n                        <CheckoutProgressBar val={85} />\n                    </Col>\n                </Row>\n            </Container>\n            <Container>\n                <Row className=\"justify-content-center\">\n                    <h2 className=\"shop-header-large py-3 text-center\">enter payment details</h2>\n                    <Col xs={2} className=\"justify-content-center\">\n                        <img className=\"w-100\" src={'/images/paymentcard.jpg'} alt='credit card logos' />\n                    </Col>\n                </Row>\n                <Row className=\"justify-content-center\">\n                    <Col xs={8} className='my-2 text-right'>\n                        <h4 className=\"checkout-text py-3 \">Total Includes all delivery charges and a handling fee of £{3} to handle lify’s operating costs, and to ensure sellers retain 100% of the money you send them</h4>\n\n                    </Col>\n                </Row>\n                <Row>\n                    <Card style={cardStyle} id=\"paymentWidgetContainerCard\">\n\n\n\n                        <Card.Body>\n\n\n                            <Elements\n                                stripe={loadStripe(\"pk_test_51IUavEFV3SCXvY9fubZHWbPtve3bWc9yFTuEM5Cx05OEblstUpwW67DwVEcYVMciTAFImsZeyshfX9MVQvGdftLQ00uES24w7o\")}\n                            >\n                                <CreditCardForm order={cart.order} />\n                            </Elements>\n                        </Card.Body>\n                    </Card>\n                </Row>\n            </Container>\n\n\n\n\n\n\n\n\n\n\n\n        </>\n    )\n}\n\nexport default PaymentScreen","/Users/jim/Desktop/LIFY DEV/lify/src/PaymentWidgets/CreditCardForm.jsx",["241","242","243","244","245"],"/Users/jim/Desktop/LIFY DEV/lify/src/PaymentWidgets/Field.jsx",[],"/Users/jim/Desktop/LIFY DEV/lify/src/Components/Tick.jsx",[],"/Users/jim/Desktop/LIFY DEV/lify/src/Screens/OrderScreen.jsx",[],"/Users/jim/Desktop/LIFY DEV/lify/src/Screens/RetailerOrdersScreen.jsx",["246","247"],"import React, { useState, useEffect } from 'react'\nimport { Form, Button, Row, Col, FormControl, Table, Container } from 'react-bootstrap'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getUserDetails, updateUserProfile, logout } from '../Actions/userActions'\nimport { listMyOrders } from '../Actions/orderActions'\nimport Loader from '../Components/Loader'\nimport Message from '../Components/Message'\n\n\n\n\n\nconst RetailerOrderScreen = ({ location, history }) => {\n\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [address, setAddress] = useState('')\n    const [phone, setPhone] = useState('')\n    const [confirmPassword, setConfirmPassword] = useState('')\n    const [message, setMessage] = useState(null)\n\n    const dispatch = useDispatch()\n\n    const userDetails = useSelector(state => state.userDetails)\n    const { loading, error, user } = userDetails\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n    const userUpdateProfile = useSelector(state => state.userUpdateProfile)\n    const { success } = userUpdateProfile\n\n    const orderListMy = useSelector(state => state.orderListMy)\n    const { orders, loading: loadingOrders, error: errorOrders } = orderListMy\n\n\n\n    useEffect(() => {\n\n        if (!userInfo || userInfo.length === 0) {\n\n            history.push('/register')\n        }\n\n\n        if (error) {\n            console.log(error)\n            //dispatch(logout())\n            //history.push('/login')\n        }\n\n        if (!user || !user.name || success) {\n            dispatch({ type: 'USER_UPDATE_PROFILE_RESET' })\n            dispatch(getUserDetails('profile'))\n            dispatch(listMyOrders())\n        } else {\n            setName(user.name)\n            setEmail(user.email)\n            setAddress(user.address)\n            setPhone(user.phone)\n        }\n\n\n    }, [dispatch, history, userInfo, user, success, error])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        if (password !== confirmPassword) {\n            setMessage('Passwords do not match!')\n        } else {\n            dispatch(updateUserProfile({ id: user._id, name, email, password, address, phone }))\n\n        }\n    }\n\n    const btnStyle = {\n        display: 'block',\n        backgroundColor: 'black',\n        color: 'white',\n        fontFamily: 'arial',\n        letterSpacing: '0.2rem',\n        borderRadius: \"0\",\n        alignItems: 'center',\n        justifyContent: 'center',\n        textDecoration: 'none',\n        display: 'block'\n    }\n\n    return <>\n\n        <img className=\"w-100\" src={\"images/account.jpg\"} alt=\"account banner\"></img>\n\n\n        <Container >\n            <Row>\n                <Col className=\"justify-content-center\" xs={12}>\n                    <h2 className=\"shop-header-large py-3 text-center\">your recent orders</h2>\n                    <br></br>\n                    {loadingOrders ? <Loader /> : errorOrders ? <Message variant='danger'>{errorOrders}</Message> : (\n\n                        <Table striped borded hover responsive className=\"table-sm\">\n                            <thead>\n                                <tr>\n                                    <th>Order Ref</th>\n                                    <th>Date</th>\n                                    <th>Total</th>\n\n                                    <th>type</th>\n                                    <th>Review Order</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {orders.map((order) => (\n                                    <tr key={order._id}>\n                                        <td>{(order._id).slice(-6)}</td>\n                                        <td>{order.createdAt.substring(0, 10)}</td>\n                                        <td><b>£{order.totalPrice}</b></td>\n                                        <td>{order.isCollection ? <p>\n                                            collection\n                                        </p> : <p>\n                                            delivery\n                                        </p>}</td>\n                                        <td>\n                                            <LinkContainer to={`/order/${order._id}`}>\n                                                <Button variant='primary' className=\"rounded\">Details</Button>\n                                            </LinkContainer>\n                                        </td>\n                                    </tr>\n                                ))}\n\n\n\n                            </tbody>\n\n                        </Table>\n\n                    )}\n                    {orders ? (orders.length === 0 && <Message className=\"w-100\" variant=\"info\">no orders yet!</Message>) : (<Loader />)}\n                </Col>\n            </Row>\n\n            <Row>\n                <h2 className=\"shop-header-large py-3 text-center\">need to speak to someone?</h2>\n                <Col className=\"text-center my-3\" xs={6}> <div style={btnStyle} className=\"btn\">problem with an order</div> </Col>\n                <Col className=\"text-center my-3\" xs={6}> <div style={btnStyle} className=\"btn\">wheres my stuff?</div> </Col>\n                <Col className=\"text-center my-3\" xs={6}> <div style={btnStyle} className=\"btn\">can i deliver too? </div> </Col>\n                <Col className=\"text-center my-3\" xs={6}> <div style={btnStyle} className=\"btn\">or something else</div> </Col>\n            </Row>\n            <Row>\n\n                <Col md={12}>\n                    <h2 className=\"shop-header-large py-3 text-center\">details changed?</h2>\n                    <h4 className=\"shop-header  text-center\">view and update details here</h4>\n                    {error && <Message variant='danger'>{errorOrders}</Message>}\n                    {message && <Message variant='danger'>{message}</Message>}\n                    {success && <Message variant='success'>Profile Updated!</Message>}\n                    {loading && <Loader />}\n                    <Form onSubmit={submitHandler}>\n                        <Form.Group controlId='name'>\n                            <Form.Label>Update Account Name</Form.Label>\n                            <FormControl\n                                type='name'\n                                placeholder='Enter name...'\n                                value={name}\n                                onChange={(e) => setName(e.target.value)}\n                            ></FormControl>\n                        </Form.Group>\n                        <Form.Group controlId='email'>\n                            <Form.Label>Update Account Email</Form.Label>\n                            <FormControl\n                                type='email'\n                                placeholder='Enter email...'\n                                value={email}\n                                onChange={(e) => setEmail(e.target.value)}\n                            ></FormControl>\n                        </Form.Group>\n\n                        <Form.Group controlId='phone'>\n                            <Form.Label>Update Account Phone</Form.Label>\n                            <FormControl\n                                type='phone'\n                                placeholder='Enter Phone Number...'\n                                value={phone}\n                                onChange={(e) => setPhone(e.target.value)}\n                            ></FormControl>\n                        </Form.Group>\n\n                        <Form.Group controlId='address'>\n                            <Form.Label>Update Account Address</Form.Label>\n                            <FormControl\n                                type='address'\n                                placeholder='Enter email...'\n                                value={address}\n                                onChange={(e) => setAddress(e.target.value)}\n                            ></FormControl>\n                        </Form.Group>\n\n                        <Form.Group controlId='password'>\n                            <Form.Label>Update Password</Form.Label>\n                            <FormControl\n                                type='password'\n                                placeholder='Enter password...'\n                                value={password}\n                                onChange={(e) => setPassword(e.target.value)}\n                            ></FormControl>\n                        </Form.Group>\n                        <Form.Group controlId='confirmPassword'>\n                            <Form.Label>Confirm Updated Password</Form.Label>\n                            <FormControl\n                                type='password'\n                                placeholder='Confirm password...'\n                                value={confirmPassword}\n                                onChange={(e) => setConfirmPassword(e.target.value)}\n                            ></FormControl>\n                        </Form.Group>\n                        <Button\n                            style={btnStyle}\n                            type='submit'\n                            className=\"w-100 btn block my-2\"\n                            block\n                        >Save!</Button>\n\n\n                    </Form>\n\n                </Col>\n\n\n            </Row>\n        </Container>\n    </>\n}\n\nexport default RetailerOrderScreen","/Users/jim/Desktop/LIFY DEV/lify/src/Screens/RetailerOrderReviewScreen.jsx",[],"/Users/jim/Desktop/LIFY DEV/lify/src/Screens/AboutScreen.jsx",["248","249","250","251","252"],{"ruleId":"253","replacedBy":"254"},{"ruleId":"255","replacedBy":"256"},{"ruleId":"257","severity":1,"message":"258","line":1,"column":28,"nodeType":"259","messageId":"260","endLine":1,"endColumn":36},{"ruleId":"253","replacedBy":"261"},{"ruleId":"255","replacedBy":"262"},{"ruleId":"263","severity":1,"message":"264","line":46,"column":9,"nodeType":"265","messageId":"266","endLine":46,"endColumn":16},{"ruleId":"257","severity":1,"message":"267","line":5,"column":45,"nodeType":"259","messageId":"260","endLine":5,"endColumn":51},{"ruleId":"263","severity":1,"message":"264","line":88,"column":9,"nodeType":"265","messageId":"266","endLine":88,"endColumn":16},{"ruleId":"257","severity":1,"message":"268","line":17,"column":18,"nodeType":"259","messageId":"260","endLine":17,"endColumn":25},{"ruleId":"257","severity":1,"message":"269","line":21,"column":27,"nodeType":"259","messageId":"260","endLine":21,"endColumn":43},{"ruleId":"257","severity":1,"message":"270","line":22,"column":18,"nodeType":"259","messageId":"260","endLine":22,"endColumn":25},{"ruleId":"257","severity":1,"message":"271","line":23,"column":20,"nodeType":"259","messageId":"260","endLine":23,"endColumn":29},{"ruleId":"257","severity":1,"message":"272","line":24,"column":22,"nodeType":"259","messageId":"260","endLine":24,"endColumn":33},{"ruleId":"257","severity":1,"message":"273","line":15,"column":13,"nodeType":"259","messageId":"260","endLine":15,"endColumn":28},{"ruleId":"257","severity":1,"message":"274","line":30,"column":13,"nodeType":"259","messageId":"260","endLine":30,"endColumn":18},{"ruleId":"263","severity":1,"message":"264","line":85,"column":9,"nodeType":"265","messageId":"266","endLine":85,"endColumn":16},{"ruleId":"257","severity":1,"message":"275","line":4,"column":73,"nodeType":"259","messageId":"260","endLine":4,"endColumn":82},{"ruleId":"263","severity":1,"message":"264","line":58,"column":9,"nodeType":"265","messageId":"266","endLine":58,"endColumn":16},{"ruleId":"257","severity":1,"message":"276","line":4,"column":67,"nodeType":"259","messageId":"260","endLine":4,"endColumn":71},{"ruleId":"257","severity":1,"message":"273","line":27,"column":13,"nodeType":"259","messageId":"260","endLine":27,"endColumn":28},{"ruleId":"257","severity":1,"message":"277","line":30,"column":19,"nodeType":"259","messageId":"260","endLine":30,"endColumn":27},{"ruleId":"257","severity":1,"message":"278","line":31,"column":21,"nodeType":"259","messageId":"260","endLine":31,"endColumn":31},{"ruleId":"257","severity":1,"message":"279","line":41,"column":21,"nodeType":"259","messageId":"260","endLine":41,"endColumn":31},{"ruleId":"280","severity":1,"message":"281","line":63,"column":8,"nodeType":"282","endLine":63,"endColumn":54,"suggestions":"283"},{"ruleId":"257","severity":1,"message":"284","line":82,"column":11,"nodeType":"259","messageId":"260","endLine":82,"endColumn":26},{"ruleId":"263","severity":1,"message":"264","line":120,"column":9,"nodeType":"265","messageId":"266","endLine":120,"endColumn":16},{"ruleId":"257","severity":1,"message":"285","line":7,"column":8,"nodeType":"259","messageId":"260","endLine":7,"endColumn":21},{"ruleId":"257","severity":1,"message":"286","line":8,"column":8,"nodeType":"259","messageId":"260","endLine":8,"endColumn":15},{"ruleId":"257","severity":1,"message":"287","line":9,"column":8,"nodeType":"259","messageId":"260","endLine":9,"endColumn":18},{"ruleId":"257","severity":1,"message":"273","line":33,"column":13,"nodeType":"259","messageId":"260","endLine":33,"endColumn":28},{"ruleId":"257","severity":1,"message":"288","line":36,"column":12,"nodeType":"259","messageId":"260","endLine":36,"endColumn":19},{"ruleId":"257","severity":1,"message":"279","line":36,"column":21,"nodeType":"259","messageId":"260","endLine":36,"endColumn":31},{"ruleId":"257","severity":1,"message":"289","line":55,"column":11,"nodeType":"259","messageId":"260","endLine":55,"endColumn":32},{"ruleId":"257","severity":1,"message":"284","line":60,"column":11,"nodeType":"259","messageId":"260","endLine":60,"endColumn":26},{"ruleId":"257","severity":1,"message":"290","line":73,"column":11,"nodeType":"259","messageId":"260","endLine":73,"endColumn":17},{"ruleId":"257","severity":1,"message":"291","line":77,"column":11,"nodeType":"259","messageId":"260","endLine":77,"endColumn":19},{"ruleId":"263","severity":1,"message":"264","line":87,"column":9,"nodeType":"265","messageId":"266","endLine":87,"endColumn":16},{"ruleId":"257","severity":1,"message":"292","line":3,"column":23,"nodeType":"259","messageId":"260","endLine":3,"endColumn":31},{"ruleId":"257","severity":1,"message":"293","line":10,"column":31,"nodeType":"259","messageId":"260","endLine":10,"endColumn":34},{"ruleId":"257","severity":1,"message":"294","line":10,"column":36,"nodeType":"259","messageId":"260","endLine":10,"endColumn":39},{"ruleId":"263","severity":1,"message":"264","line":30,"column":5,"nodeType":"265","messageId":"266","endLine":30,"endColumn":12},{"ruleId":"257","severity":1,"message":"273","line":85,"column":13,"nodeType":"259","messageId":"260","endLine":85,"endColumn":28},{"ruleId":"257","severity":1,"message":"267","line":5,"column":45,"nodeType":"259","messageId":"260","endLine":5,"endColumn":51},{"ruleId":"263","severity":1,"message":"264","line":88,"column":9,"nodeType":"265","messageId":"266","endLine":88,"endColumn":16},{"ruleId":"257","severity":1,"message":"295","line":2,"column":20,"nodeType":"259","messageId":"260","endLine":2,"endColumn":29},{"ruleId":"257","severity":1,"message":"296","line":2,"column":31,"nodeType":"259","messageId":"260","endLine":2,"endColumn":36},{"ruleId":"257","severity":1,"message":"276","line":2,"column":38,"nodeType":"259","messageId":"260","endLine":2,"endColumn":42},{"ruleId":"257","severity":1,"message":"297","line":2,"column":44,"nodeType":"259","messageId":"260","endLine":2,"endColumn":50},{"ruleId":"257","severity":1,"message":"298","line":2,"column":52,"nodeType":"259","messageId":"260","endLine":2,"endColumn":65},"no-native-reassign",["299"],"no-negated-in-lhs",["300"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar",["299"],["300"],"no-dupe-keys","Duplicate key 'display'.","ObjectExpression","unexpected","'logout' is defined but never used.","'setName' is assigned a value but never used.","'setStreetAddress' is assigned a value but never used.","'setTown' is assigned a value but never used.","'setCounty' is assigned a value but never used.","'setPostcode' is assigned a value but never used.","'shippingAddress' is assigned a value but never used.","'error' is assigned a value but never used.","'Container' is defined but never used.","'Card' is defined but never used.","'setEmail' is assigned a value but never used.","'setAddress' is assigned a value but never used.","'setMessage' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'address'. Either include it or remove the dependency array.","ArrayExpression",["301"],"'checkOutHandler' is assigned a value but never used.","'FormContainer' is defined but never used.","'Message' is defined but never used.","'DatePicker' is defined but never used.","'message' is assigned a value but never used.","'removeFromCartHandler' is assigned a value but never used.","'goBack' is assigned a value but never used.","'btnStyle' is assigned a value but never used.","'payOrder' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'ListGroup' is defined but never used.","'Image' is defined but never used.","'Button' is defined but never used.","'ListGroupItem' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"302","fix":"303"},"Update the dependencies array to be: [dispatch, userInfo, productId, qty, delivery, address]",{"range":"304","text":"305"},[2126,2172],"[dispatch, userInfo, productId, qty, delivery, address]"]