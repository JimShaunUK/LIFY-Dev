[{"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/index.js":"1","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/App.js":"2","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/serviceWorkerRegistration.js":"3","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/store.js":"4","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/reportWebVitals.js":"5","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Reducers/productReducers.js":"6","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Reducers/retailerReducers.js":"7","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Reducers/townReducers.js":"8","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Reducers/cartReducer.js":"9","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Reducers/orderReducers.js":"10","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Reducers/userReducers.js":"11","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Reducers/courierReducers.js":"12","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Components/Footer.jsx":"13","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/HomeScreen.jsx":"14","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Components/Header.jsx":"15","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/ProductScreen.jsx":"16","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/RetailerScreen.jsx":"17","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/StoreScreen.jsx":"18","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/RegisterScreen.jsx":"19","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/ProfileScreen.jsx":"20","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/RetailerProductScreen.jsx":"21","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/RegisterScreenTwo.jsx":"22","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/TownScreen.jsx":"23","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/LoginScreen.jsx":"24","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/CartScreen.jsx":"25","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/OrderScreen.jsx":"26","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/ReviewOrderScreen.jsx":"27","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/ResultsScreen.jsx":"28","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/AboutScreen.jsx":"29","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/PaymentScreen.jsx":"30","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/SearchScreen.jsx":"31","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/RetailerOrdersScreen.jsx":"32","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/RetailerOrderReviewScreen.jsx":"33","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/ProductEditScreen.jsx":"34","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/ProductListScreen.jsx":"35","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/AvailableDeliveryScreen.jsx":"36","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/DeliveryScreen.jsx":"37","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Actions/courierActions.js":"38","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Actions/townActions.js":"39","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Actions/retailerActions.js":"40","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Actions/orderActions.js":"41","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Actions/cartActions.js":"42","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Actions/productActions.js":"43","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Actions/userActions.js":"44","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Components/Loader.jsx":"45","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Components/Message.jsx":"46","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Components/FormContainer.jsx":"47","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Components/Retailer.jsx":"48","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Components/Product.jsx":"49","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Components/CheckoutProgressBar.jsx":"50","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/PaymentWidgets/CreditCardForm.jsx":"51","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Components/Town.jsx":"52","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Components/RegisterProgressBar.jsx":"53","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/PaymentWidgets/Field.jsx":"54","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Components/Tick.jsx":"55"},{"size":911,"mtime":1623078587368,"results":"56","hashOfConfig":"57"},{"size":3332,"mtime":1623013853791,"results":"58","hashOfConfig":"57"},{"size":5064,"mtime":1620333302117,"results":"59","hashOfConfig":"57"},{"size":3511,"mtime":1623066414551,"results":"60","hashOfConfig":"57"},{"size":364,"mtime":1620333302116,"results":"61","hashOfConfig":"57"},{"size":3518,"mtime":1622925459037,"results":"62","hashOfConfig":"57"},{"size":3148,"mtime":1622988803640,"results":"63","hashOfConfig":"57"},{"size":807,"mtime":1622453893990,"results":"64","hashOfConfig":"57"},{"size":1535,"mtime":1622634835758,"results":"65","hashOfConfig":"57"},{"size":4893,"mtime":1622909975386,"results":"66","hashOfConfig":"57"},{"size":3367,"mtime":1622913462430,"results":"67","hashOfConfig":"57"},{"size":2099,"mtime":1623067372211,"results":"68","hashOfConfig":"57"},{"size":462,"mtime":1621790492071,"results":"69","hashOfConfig":"57"},{"size":4773,"mtime":1623159179754,"results":"70","hashOfConfig":"57"},{"size":5506,"mtime":1623008978980,"results":"71","hashOfConfig":"57"},{"size":6158,"mtime":1622466906890,"results":"72","hashOfConfig":"57"},{"size":2382,"mtime":1622472794262,"results":"73","hashOfConfig":"57"},{"size":2333,"mtime":1622467154893,"results":"74","hashOfConfig":"57"},{"size":5759,"mtime":1622562267865,"results":"75","hashOfConfig":"57"},{"size":9531,"mtime":1623159402058,"results":"76","hashOfConfig":"57"},{"size":2563,"mtime":1622466930257,"results":"77","hashOfConfig":"57"},{"size":5558,"mtime":1622562849123,"results":"78","hashOfConfig":"57"},{"size":981,"mtime":1623159493832,"results":"79","hashOfConfig":"57"},{"size":3040,"mtime":1622564452590,"results":"80","hashOfConfig":"57"},{"size":5906,"mtime":1623090455764,"results":"81","hashOfConfig":"57"},{"size":9850,"mtime":1623164195184,"results":"82","hashOfConfig":"57"},{"size":12807,"mtime":1623164059279,"results":"83","hashOfConfig":"57"},{"size":3915,"mtime":1623159443016,"results":"84","hashOfConfig":"57"},{"size":927,"mtime":1623155808729,"results":"85","hashOfConfig":"57"},{"size":3718,"mtime":1623159376322,"results":"86","hashOfConfig":"57"},{"size":2015,"mtime":1622881273029,"results":"87","hashOfConfig":"57"},{"size":8805,"mtime":1623225525242,"results":"88","hashOfConfig":"57"},{"size":10577,"mtime":1623083854675,"results":"89","hashOfConfig":"57"},{"size":8891,"mtime":1622984029824,"results":"90","hashOfConfig":"57"},{"size":5903,"mtime":1622985164911,"results":"91","hashOfConfig":"57"},{"size":7252,"mtime":1623225739422,"results":"92","hashOfConfig":"57"},{"size":8043,"mtime":1623159356007,"results":"93","hashOfConfig":"57"},{"size":3244,"mtime":1623066630180,"results":"94","hashOfConfig":"57"},{"size":987,"mtime":1622453968985,"results":"95","hashOfConfig":"57"},{"size":2603,"mtime":1622989002859,"results":"96","hashOfConfig":"57"},{"size":7081,"mtime":1623085665368,"results":"97","hashOfConfig":"57"},{"size":1698,"mtime":1622645984445,"results":"98","hashOfConfig":"57"},{"size":5084,"mtime":1622926818295,"results":"99","hashOfConfig":"57"},{"size":7000,"mtime":1622913622615,"results":"100","hashOfConfig":"57"},{"size":230,"mtime":1621973221502,"results":"101","hashOfConfig":"57"},{"size":278,"mtime":1621869623022,"results":"102","hashOfConfig":"57"},{"size":381,"mtime":1622467604103,"results":"103","hashOfConfig":"57"},{"size":1024,"mtime":1623159205022,"results":"104","hashOfConfig":"57"},{"size":1062,"mtime":1623159178047,"results":"105","hashOfConfig":"57"},{"size":899,"mtime":1622645570392,"results":"106","hashOfConfig":"57"},{"size":13182,"mtime":1622924459036,"results":"107","hashOfConfig":"57"},{"size":806,"mtime":1623159228014,"results":"108","hashOfConfig":"57"},{"size":607,"mtime":1622574601088,"results":"109","hashOfConfig":"57"},{"size":883,"mtime":1622633659724,"results":"110","hashOfConfig":"57"},{"size":217,"mtime":1622640767612,"results":"111","hashOfConfig":"57"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},"m7nxw5",{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"114"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"114"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"114"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"114"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"114"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"114"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"114"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"114"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"114"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"114"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"187","messages":"188","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"114"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"114"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"114"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"198","messages":"199","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"114"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"114"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/index.js",[],["238","239"],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/App.js",[],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/serviceWorkerRegistration.js",[],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/store.js",[],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/reportWebVitals.js",[],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Reducers/productReducers.js",[],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Reducers/retailerReducers.js",[],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Reducers/townReducers.js",[],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Reducers/cartReducer.js",[],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Reducers/orderReducers.js",[],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Reducers/userReducers.js",[],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Reducers/courierReducers.js",[],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Components/Footer.jsx",[],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/HomeScreen.jsx",[],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Components/Header.jsx",["240"],"import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { Navbar, Nav, Container } from 'react-bootstrap';\nimport { Link } from 'react-router-dom'\nimport { logout } from '../Actions/userActions'\n\n\n\nconst Header = ({ history }) => {\n\n\n\n\n    const dispatch = useDispatch()\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n\n\n    const logoutHandler = () => {\n        localStorage.removeItem('userInfo')\n        dispatch(logout())\n\n    }\n\n    useEffect(() => {\n\n\n\n    }, [history])\n\n\n    const navFix = {\n        zIndex: '1000'\n    }\n\n\n\n\n\n    return (\n        <header>\n\n            <Navbar className=\"nav-fill w-100\" bg=\"light\" expand=\"x\">\n                <Container>\n                    <Navbar.Toggle id=\"test\" aria-controls=\"basic-navbar-nav\" />\n                    <LinkContainer to=\"/search\">\n                        <Nav.Link> <span>\n                            <img className=\"nav-img\" src={`/images/search.png`} alt=\"search\"></img>\n                        </span></Nav.Link>\n                    </LinkContainer>\n                    <LinkContainer to=\"/\">\n                        <Navbar.Brand ><h1>lify</h1></Navbar.Brand>\n                    </LinkContainer>\n                    <LinkContainer to=\"/profile\">\n                        <Nav.Link> <span>\n                            <img className=\"nav-img\" src={`/images/profile.png`} alt=\"account\"></img>\n                        </span></Nav.Link>\n                    </LinkContainer>\n                    <LinkContainer to=\"/cart\">\n                        <Nav.Link> <span>\n                            <img className=\"nav-img\" src={`/images/basket.png`} alt=\"basket\"></img>\n                        </span></Nav.Link>\n                    </LinkContainer>\n                </Container>\n                <Navbar.Collapse style={navFix} id=\"collapseNav\" className=\"nav-bg\">\n\n                    <>\n                        <Link to=\"/\">\n                            <div className=\"nav-block py-1 my-1 mx-1 nav-text\">home</div>\n                        </Link>\n                        <Link to=\"/about\">\n                            <div className=\"nav-block py-1 my-1 mx-1 nav-text\">about us</div>\n                        </Link>\n                        <Link to=\"/towns\">\n                            <div className=\"nav-block py-1 my-1 mx-1 nav-text\">towns and products</div>\n                        </Link>\n\n\n                        {userInfo ? (\n                            <>\n                                <Link to=\"/profile\">\n                                    <div className=\"nav-block py-1  my-1 mx-1 nav-text\">account</div>\n                                </Link>\n                                <Link to='/login'>\n                                    <div onClick={logoutHandler} className=\"nav-block-retailer py-1 my-1 mx-1 nav-text\">log out</div>\n                                </Link>\n\n                                {userInfo && userInfo.isRetailer && (\n                                    <>\n                                        <hr />\n                                        <Link to=\"/retailer/productlist\">\n                                            <div className=\"nav-block-retailer py-1  my-1 mx-1 nav-text\">manage store</div>\n                                        </Link>\n                                        <Link to=\"/retailers/orders\">\n                                            <div className=\"nav-block-retailer py-1  my-1 mx-1 nav-text\">manage orders</div>\n                                        </Link>\n\n                                    </>\n                                )}\n                                {userInfo && userInfo.isCourier && (\n                                    <>\n                                        <hr />\n                                        <Link to=\"/courier/available\">\n                                            <div className=\"nav-block-retailer py-1  my-1 mx-1 nav-text\">courier: get delivery</div>\n                                        </Link>\n\n                                    </>\n                                )}\n                                {userInfo && userInfo.isAdmin && (\n                                    <>\n                                        <Link to=\"\">\n                                            <div className=\"nav-block-admin py-1  my-1 mx-1 nav-text\">admin:manage towns/retailers</div>\n                                        </Link>\n                                        <Link to=\"\">\n                                            <div className=\"nav-block-admin py-1 my-1 mx-1 nav-text\">admin: manage user accounts</div>\n                                        </Link>\n                                        <Link to=\"\">\n                                            <div className=\"nav-block-admin py-1 my-1 mx-1 nav-text\">admin: manager orders</div>\n                                        </Link>\n\n                                    </>\n                                )}\n                            </>\n                        ) : (\n                            <Link to=\"/login\">\n                                <div className=\"nav-block py-1  my-1 mx-1 nav-text\">login/register</div>\n                            </Link>\n                        )}\n\n                    </>\n\n                </Navbar.Collapse>\n\n\n            </Navbar>\n        </header >\n    )\n}\n\nexport default Header","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/ProductScreen.jsx",[],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/RetailerScreen.jsx",[],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/StoreScreen.jsx",[],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/RegisterScreen.jsx",["241","242","243"],"import React, { useState, useEffect } from 'react'\nimport { Form, Button, Row, Col, FormControl } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { logout } from '../Actions/userActions'\nimport { saveShippingAddress } from '../Actions/cartActions'\nimport FormContainer from '../Components/FormContainer'\nimport Message from '../Components/Message'\n\n\nconst RegisterScreen = ({ location, history }) => {\n\n\n\n    const cart = useSelector(state => state.cart)\n    const { shippingAddress } = cart\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n\n\n    const [streetAddress, setStreetAddress] = useState('')\n    const [town, setTown] = useState('')\n    const [county, setCounty] = useState('')\n    const [postcode, setPostcode] = useState('')\n\n    const [message, setMessage] = useState(null)\n\n    const dispatch = useDispatch()\n\n    const userRegister = useSelector(state => state.userRegister)\n    const { error, userInfo } = userRegister\n\n\n    useEffect(() => {\n        if (userInfo) {\n            history.push('/account')\n        }\n    }, [history, userInfo])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n\n        if (name === '') {\n            setMessage('An account owner needs a name!')\n        }\n        else if (email === '') {\n            setMessage('You must provide a unique email!')\n        }\n        else if (streetAddress === '') {\n            setMessage('You must provide a street address!')\n        }\n        else if (town === '') {\n            setMessage('You must provide a town')\n        }\n        else if (county === '') {\n            setMessage('You must provide a county!')\n        }\n        else if (postcode === '') {\n            setMessage('You must provide a valid postcode!')\n        }\n        else {\n\n            dispatch(saveShippingAddress({ name, email, streetAddress, town, county, postcode }))\n            history.push('/register/complete')\n        }\n\n\n    }\n\n    const clearuserData = () => {\n        localStorage.removeItem('userInfo')\n        dispatch(logout())\n        history.push('/login')\n    }\n\n    const btnStyle = {\n        display: 'block',\n        backgroundColor: 'black',\n        color: 'white',\n        fontFamily: 'arial',\n        letterSpacing: '0.2rem',\n        borderRadius: \"0\",\n        alignItems: 'center',\n        justifyContent: 'center',\n        textDecoration: 'none',\n        display: 'block'\n    }\n\n\n    return (\n        <FormContainer>\n            <h2 className=\"shop-header-large py-3 text-center\">sign up!</h2>\n            <h4 className=\"shop-header  text-center\">create an account to purchase and track orders</h4>\n\n            <Form onSubmit={submitHandler}>\n                <Form.Group controlId='name'>\n                    <Form.Label>Name</Form.Label>\n                    <FormControl\n                        type='name'\n                        placeholder='Enter name...'\n                        value={name}\n                        onChange={(e) => setName(e.target.value)}\n                    ></FormControl>\n                </Form.Group>\n                <Form.Group controlId='email'>\n                    <Form.Label>Email</Form.Label>\n                    <FormControl\n                        type='email'\n                        placeholder='Enter email...'\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                    ></FormControl>\n                </Form.Group>\n\n\n\n                <Form.Group controlId='streetAddress'>\n                    <Form.Label>Street Address</Form.Label>\n                    <FormControl\n                        type='streetAddress'\n                        placeholder='Enter street address...'\n                        value={streetAddress}\n                        onChange={(e) => setStreetAddress(e.target.value)}\n                    ></FormControl>\n                </Form.Group>\n\n                <Form.Group controlId='town'>\n                    <Form.Label>Town</Form.Label>\n                    <FormControl\n                        type='town'\n                        placeholder='Enter town...'\n                        value={town}\n                        onChange={(e) => setTown(e.target.value)}\n                    ></FormControl>\n                </Form.Group>\n\n                <Form.Group controlId='county'>\n                    <Form.Label>County</Form.Label>\n                    <FormControl\n                        type='county'\n                        placeholder='Enter county...'\n                        value={county}\n                        onChange={(e) => setCounty(e.target.value)}\n                    ></FormControl>\n                </Form.Group>\n\n\n                <Form.Group controlId='postcode'>\n                    <Form.Label>Postcode</Form.Label>\n                    <FormControl\n                        type='postcode'\n                        placeholder='Enter postcode...'\n                        value={postcode}\n                        onChange={(e) => setPostcode(e.target.value)}\n                    ></FormControl>\n                </Form.Group>\n\n                <Form.Group className='my-2 text-center'>\n                    {message && <Message variant='danger'>{message}</Message>}\n                </Form.Group>\n\n                <Button\n                    type='submit'\n                    className=\"w-100\"\n                    style={btnStyle}\n                >Register</Button>\n\n\n            </Form>\n\n            <Row>\n\n                <Col>\n                    <div onClick={clearuserData} className=\"text-center shop-link-lg my-5 py-1\">or login here!</div>\n\n\n                </Col>\n            </Row>\n\n\n        </FormContainer>\n    )\n}\n\nexport default RegisterScreen\n","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/ProfileScreen.jsx",["244"],"import React, { useState, useEffect } from 'react'\nimport { Form, Button, Row, Col, FormControl, Table, Container } from 'react-bootstrap'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getUserDetails, updateUserProfile } from '../Actions/userActions'\nimport { listMyOrders } from '../Actions/orderActions'\nimport Loader from '../Components/Loader'\nimport Message from '../Components/Message'\n\n\n\n\n\nconst ProfileScreen = ({ location, history }) => {\n\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [address, setAddress] = useState('')\n    const [phone, setPhone] = useState('')\n    const [confirmPassword, setConfirmPassword] = useState('')\n    const [message, setMessage] = useState(null)\n\n    const dispatch = useDispatch()\n\n    const userDetails = useSelector(state => state.userDetails)\n    const { loading, error, user } = userDetails\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n    const userUpdateProfile = useSelector(state => state.userUpdateProfile)\n    const { success } = userUpdateProfile\n\n    const orderListMy = useSelector(state => state.orderListMy)\n    const { orders, loading: loadingOrders, error: errorOrders } = orderListMy\n\n\n\n    useEffect(() => {\n\n        if (!userInfo || userInfo.length === 0) {\n\n            history.push('/register')\n        }\n\n\n        if (error) {\n            console.log(error)\n            //dispatch(logout())\n            //history.push('/login')\n        }\n\n        if (!user || !user.name || success) {\n            dispatch({ type: 'USER_UPDATE_PROFILE_RESET' })\n            dispatch(getUserDetails('profile'))\n            dispatch(listMyOrders())\n        } else {\n            setName(user.name)\n            setEmail(user.email)\n            setAddress(user.address)\n            setPhone(user.phone)\n        }\n\n\n    }, [dispatch, history, userInfo, user, success, error])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        if (password !== confirmPassword) {\n            setMessage('Passwords do not match!')\n        } else {\n            dispatch(updateUserProfile({ id: user._id, name, email, password, address, phone }))\n\n        }\n    }\n\n    const btnStyle = {\n        display: 'block',\n        backgroundColor: 'black',\n        color: 'white',\n        fontFamily: 'arial',\n        letterSpacing: '0.2rem',\n        borderRadius: \"0\",\n        alignItems: 'center',\n        justifyContent: 'center',\n        textDecoration: 'none',\n        display: 'block'\n    }\n\n    return <>\n\n        <img className=\"w-100\" src={\"/images/account.jpg\"} alt=\"account banner\"></img>\n\n\n        <Container >\n            <Row>\n                <Col className=\"justify-content-center\" xs={12}>\n                    <h2 className=\"shop-header-large py-3 text-center\">your recent orders</h2>\n                    <br></br>\n                    {loadingOrders ? <Loader /> : errorOrders ? <Message variant='danger'>{errorOrders}</Message> : (\n\n                        <Table striped borded hover responsive className=\"table-sm\">\n                            <thead>\n                                <tr>\n                                    <th>Order Ref</th>\n                                    <th>Date</th>\n                                    <th>Total</th>\n\n                                    <th>type</th>\n                                    <th>Review Order</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {orders.map((order) => (\n                                    <tr key={order._id}>\n                                        <td>{(order._id).slice(-6)}</td>\n                                        <td>{order.createdAt.substring(0, 10)}</td>\n                                        <td><b>£{order.totalPrice}</b></td>\n                                        <td>{order.isCollection ? <p>\n                                            collection\n                                        </p> : <p>\n                                            delivery\n                                        </p>}</td>\n                                        <td>\n                                            <LinkContainer to={`/order/${order._id}`}>\n                                                <Button variant='primary' className=\"rounded\">Details</Button>\n                                            </LinkContainer>\n                                        </td>\n                                    </tr>\n                                ))}\n\n\n\n                            </tbody>\n\n                        </Table>\n\n                    )}\n                    {orders ? (orders.length === 0 && <Message className=\"w-100\" variant=\"info\">no orders yet!</Message>) : (<Loader />)}\n                </Col>\n            </Row>\n\n            <Row>\n                <h2 className=\"shop-header-large py-3 text-center\">need to speak to someone?</h2>\n                <Col className=\"text-center my-3\" xs={6}> <div style={btnStyle} className=\"btn\">problem with an order</div> </Col>\n                <Col className=\"text-center my-3\" xs={6}> <div style={btnStyle} className=\"btn\">wheres my stuff?</div> </Col>\n                <Col className=\"text-center my-3\" xs={6}> <div style={btnStyle} className=\"btn\">can i deliver too? </div> </Col>\n                <Col className=\"text-center my-3\" xs={6}> <div style={btnStyle} className=\"btn\">or something else</div> </Col>\n            </Row>\n            <Row>\n\n                <Col md={12}>\n                    <h2 className=\"shop-header-large py-3 text-center\">details changed?</h2>\n                    <h4 className=\"shop-header  text-center\">view and update details here</h4>\n                    {error && <Message variant='danger'>{errorOrders}</Message>}\n                    {message && <Message variant='danger'>{message}</Message>}\n                    {success && <Message variant='success'>Profile Updated!</Message>}\n                    {loading && <Loader />}\n                    <Form onSubmit={submitHandler}>\n                        <Form.Group controlId='name'>\n                            <Form.Label>Update Account Name</Form.Label>\n                            <FormControl\n                                type='name'\n                                placeholder='Enter name...'\n                                value={name}\n                                onChange={(e) => setName(e.target.value)}\n                            ></FormControl>\n                        </Form.Group>\n                        <Form.Group controlId='email'>\n                            <Form.Label>Update Account Email</Form.Label>\n                            <FormControl\n                                type='email'\n                                placeholder='Enter email...'\n                                value={email}\n                                onChange={(e) => setEmail(e.target.value)}\n                            ></FormControl>\n                        </Form.Group>\n\n                        <Form.Group controlId='phone'>\n                            <Form.Label>Update Account Phone</Form.Label>\n                            <FormControl\n                                type='phone'\n                                placeholder='Enter Phone Number...'\n                                value={phone}\n                                onChange={(e) => setPhone(e.target.value)}\n                            ></FormControl>\n                        </Form.Group>\n\n                        <Form.Group controlId='address'>\n                            <Form.Label>Update Account Address</Form.Label>\n                            <FormControl\n                                type='address'\n                                placeholder='Enter email...'\n                                value={address}\n                                onChange={(e) => setAddress(e.target.value)}\n                            ></FormControl>\n                        </Form.Group>\n\n                        <Form.Group controlId='password'>\n                            <Form.Label>Update Password</Form.Label>\n                            <FormControl\n                                type='password'\n                                placeholder='Enter password...'\n                                value={password}\n                                onChange={(e) => setPassword(e.target.value)}\n                            ></FormControl>\n                        </Form.Group>\n                        <Form.Group controlId='confirmPassword'>\n                            <Form.Label>Confirm Updated Password</Form.Label>\n                            <FormControl\n                                type='password'\n                                placeholder='Confirm password...'\n                                value={confirmPassword}\n                                onChange={(e) => setConfirmPassword(e.target.value)}\n                            ></FormControl>\n                        </Form.Group>\n                        <Button\n                            style={btnStyle}\n                            type='submit'\n                            className=\"w-100 btn block my-2\"\n                            block\n                        >Save!</Button>\n\n\n                    </Form>\n\n                </Col>\n\n\n            </Row>\n        </Container>\n    </>\n}\n\nexport default ProfileScreen","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/RetailerProductScreen.jsx",[],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/RegisterScreenTwo.jsx",["245","246","247","248","249"],"import React, { useState, useEffect } from 'react'\nimport { Form, Button, Row, Col, FormControl } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { register, logout } from '../Actions/userActions'\nimport FormContainer from '../Components/FormContainer'\nimport RegisterProgressBar from '../Components/RegisterProgressBar'\nimport Message from '../Components/Message'\nimport Loader from '../Components/Loader'\n\n\nconst RegisterScreen = ({ location, history }) => {\n\n\n    const cart = useSelector(state => state.cart)\n    const { shippingAddress } = cart\n\n    const [name, setName] = useState(shippingAddress.name)\n    const [email, setEmail] = useState(shippingAddress.email)\n\n\n    const [streetAddress, setStreetAddress] = useState(shippingAddress.streetAddress)\n    const [town, setTown] = useState(shippingAddress.town)\n    const [county, setCounty] = useState(shippingAddress.county)\n    const [postcode, setPostcode] = useState(shippingAddress.postcode)\n    const [address, setAddress] = useState('')\n\n\n    const [phone, setPhone] = useState('')\n    const [password, setPassword] = useState('')\n    const [confirmPassword, setConfirmPassword] = useState('')\n\n\n\n\n\n\n\n    const [message, setMessage] = useState(null)\n\n    const dispatch = useDispatch()\n\n    const userRegister = useSelector(state => state.userRegister)\n    const { loading, error, userInfo } = userRegister\n\n\n\n\n\n    useEffect(() => {\n\n        if (userInfo) {\n            history.push('/profile')\n        }\n    }, [history, userInfo, shippingAddress])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        if (password !== confirmPassword) {\n            setMessage('Passwords do not match!')\n        } else {\n\n            setAddress(`${streetAddress}, ${town}, ${county}, ${postcode}`)\n            dispatch(register(name, email, password, address, phone))\n            //history.push('/profile')\n        }\n    }\n\n    const clearuserData = () => {\n        localStorage.removeItem('userInfo')\n        dispatch(logout())\n        history.push('/login')\n    }\n\n    const btnStyle = {\n        display: 'block',\n        backgroundColor: 'black',\n        color: 'white',\n        fontFamily: 'arial',\n        letterSpacing: '0.2rem',\n        borderRadius: \"0\",\n        alignItems: 'center',\n        justifyContent: 'center',\n        textDecoration: 'none',\n\n    }\n\n    return (\n        <FormContainer>\n            <h2 className=\"shop-header-large py-3 text-center\">almost there!</h2>\n            <RegisterProgressBar val={80} />\n\n            <h4 className=\"shop-header py-2 text-center\">check details and provide a password</h4>\n\n\n\n            <Form onSubmit={submitHandler}>\n\n                <Form.Group controlId='email'>\n                    <Form.Label>Email</Form.Label>\n                    <FormControl\n                        type='email'\n                        placeholder='Enter email...'\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                    ></FormControl>\n                </Form.Group>\n\n                <Form.Group controlId='address'>\n                    <Form.Label>Address</Form.Label>\n                    <FormControl\n                        type='address'\n                        placeholder='Enter address...'\n                        value={`${streetAddress}, ${town}, ${county}, ${postcode}`}\n                        onChange={(e) => setAddress(e.target.value)}\n                    ></FormControl>\n                </Form.Group>\n\n\n                <Form.Group controlId='phone'>\n                    <Form.Label>Phone</Form.Label>\n                    <FormControl\n                        type='phone'\n                        placeholder='Enter phone number...'\n                        value={phone}\n                        onChange={(e) => setPhone(e.target.value)}\n                    ></FormControl>\n                </Form.Group>\n\n\n                <Form.Group controlId='password'>\n                    <Form.Label>Password</Form.Label>\n                    <FormControl\n                        type='password'\n                        placeholder='Enter password...'\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    ></FormControl>\n                </Form.Group>\n                <Form.Group controlId='confirmPassword'>\n                    <Form.Label>Confirm Password</Form.Label>\n                    <FormControl\n                        type='password'\n                        placeholder='Confirm password...'\n                        value={confirmPassword}\n                        onChange={(e) => setConfirmPassword(e.target.value)}\n                    ></FormControl>\n                </Form.Group>\n                <Form.Group className=\"py-2\">\n                    {error && <Message className=\"py-2\" variant='danger'>{error}</Message>}\n                    {message && <Message className=\"py-2\" variant='danger'>{message}</Message>}\n                    {loading && <Loader />}\n                </Form.Group>\n                <Button\n                    type='submit'\n                    className=\"w-100\"\n                    style={btnStyle}\n                >sign up and sign in</Button>\n\n\n            </Form>\n\n            <Row>\n\n                <Col>\n                    <div onClick={clearuserData} className=\"text-center shop-link-lg my-5 py-1\">or login here!</div>\n\n\n                </Col>\n            </Row>\n\n\n        </FormContainer>\n    )\n}\n\nexport default RegisterScreen\n","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/TownScreen.jsx",[],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/LoginScreen.jsx",["250"],"import React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Form, Button, Row, Col, FormControl } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { login } from '../Actions/userActions'\nimport FormContainer from '../Components/FormContainer'\nimport Message from '../Components/Message'\nimport Loader from '../Components/Loader'\n\n\n\nconst LoginScreen = ({ location, history }) => {\n\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n\n    const dispatch = useDispatch()\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { loading, error, userInfo } = userLogin\n\n    const redirect = location.search ? location.search.split('=')[1] : '/'\n\n    useEffect(() => {\n        if (userInfo) {\n            history.push('/profile')\n        }\n    }, [history, userInfo, redirect])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(login(email, password))\n\n    }\n\n    const btnStyle = {\n        display: 'block',\n        backgroundColor: 'black',\n        color: 'white',\n        fontFamily: 'arial',\n        letterSpacing: '0.2rem',\n        borderRadius: \"0\",\n        alignItems: 'center',\n        justifyContent: 'center',\n        textDecoration: 'none',\n        display: 'block'\n    }\n\n    return (\n        <FormContainer>\n            <h2 className=\"shop-header-large py-3 text-center\">sign in!</h2>\n            <h4 className=\"shop-header  text-center\">access your account with your email and password</h4>\n            {error && <Message variant={'danger'}>{error}</Message>}\n            {loading && <Loader />}\n            <Form onSubmit={submitHandler}>\n                <Form.Group controlId='email'>\n                    <Form.Label>Email</Form.Label>\n                    <FormControl\n                        type='email'\n                        placeholder='Enter email...'\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                    ></FormControl>\n                </Form.Group>\n\n                <Form.Group controlId='password'>\n                    <Form.Label>Password</Form.Label>\n                    <FormControl\n                        type='password'\n                        placeholder='Enter password...'\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    ></FormControl>\n                </Form.Group>\n                <Button\n                    type='submit'\n                    style={btnStyle}\n                    className=\"w-100 my-3\">Sign In\n                    </Button>\n\n\n            </Form>\n            <Row className=\"py-1\">\n                <Col>\n                    <Link to='/register'>\n                        <div className=\"text-center shop-link-lg py-4\">or register here!</div>\n                    </Link>\n                </Col>\n\n            </Row>\n\n        </FormContainer>\n    )\n}\n\nexport default LoginScreen\n","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/CartScreen.jsx",["251","252"],"import React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Row, Col, ListGroupItem, Image, Form, Button, ListGroup, Card, Container } from 'react-bootstrap'\nimport { addToCart, removeFromCart } from '../Actions/cartActions'\n\n\nconst CartScreen = ({ match, location, history }) => {\n\n    const productId = match.params.id\n\n    //whatever is in the url after the ? will store in qty\n    const qty = location.search ? Number(location.search.split('=')[1]) : 1\n    //console.log(qty)\n\n    const dispatch = useDispatch()\n\n    const cart = useSelector(state => state.cart)\n    const userInfo = useSelector(state => state.userLogin.userInfo)\n\n\n\n    useEffect(() => {\n        if (productId) {\n            dispatch(addToCart(productId, qty))\n        }\n    }, [dispatch, productId, qty])\n\n    const removeFromCartHandler = (id) => {\n        dispatch(removeFromCart(id))\n    }\n\n    const checkOutHandler = () => {\n\n        if (!userInfo || userInfo.length === 0) {\n\n            history.push('/register')\n        }\n        else {\n            history.push('/review/order')\n        }\n    }\n\n    const goBack = () => {\n        history.goBack()\n    }\n\n    const btnStyle = {\n        display: 'block',\n        backgroundColor: 'black',\n        color: 'white',\n        fontFamily: 'arial',\n        letterSpacing: '0.2rem',\n        borderRadius: \"0\",\n        alignItems: 'center',\n        justifyContent: 'center',\n        textDecoration: 'none',\n        display: 'block'\n    }\n\n    return (\n        <>\n            <Row className=\"justify-content-center\">\n\n                <Col xs={8}>\n\n                    <p className=\"checkout-text my-3\">Not done? <Link className=\"underline shop-link-lg my-3\" onClick={goBack}>Continue Shopping</Link></p>\n                </Col>\n            </Row>\n            <Row className=\"justify-content-center\">\n\n                <Col xs={12}>\n\n                    <h2 className=\"shop-header-large py-3 text-center\">my basket</h2>\n                    {cart.cartItems.length === 0 ? (<h2 className=\"shop-header-large py-3 text-center\">Your basket is empty!<Link className=\"btn btn-outline-primary rounded mx-3\" onClick={goBack}>Back to Shop?</Link></h2>\n                    ) : (\n                        <ListGroup variant=\"flush\">\n\n                            {cart.cartItems.map(item => (\n                                <ListGroupItem key={item.product}>\n                                    <Row>\n                                        <Col xs={2} md={3}>\n                                            <Image src={item.image} alt={item.name} fluid rounded />\n                                        </Col>\n                                        <Col xs={2} md={3}>\n                                            <h3 className=\"checkout-link-lg mt-4\" ><Link to={`/product/${item.product}`}>{item.name}</Link></h3>\n                                        </Col>\n                                        <Col xs={2} md={2}>\n                                            <p className=\"checkout-text-lg mt-4\">£{item.price}</p>\n                                        </Col>\n                                        <Col xs={2} md={2}>\n                                            <Form.Control className=\"mt-3\" as='select' value={item.qty} onChange={(e) => dispatch(addToCart(item.product, Number(e.target.value)))}>\n                                                {\n                                                    [...Array(item.stock).keys()].map(x => (\n                                                        <option key={x + 1} value={x + 1}> {x + 1}</option>\n                                                    ))\n                                                }\n                                            </Form.Control>\n                                        </Col>\n                                        <Col xs={2} md={2}>\n                                            <Button\n                                                type=\"button\"\n                                                style={btnStyle}\n                                                className=\"btn mt-4 p-1 w-100\"\n                                                onClick={() => removeFromCartHandler(item.product)}>\n\n                                                X\n                                             </Button>\n                                        </Col>\n                                    </Row>\n                                </ListGroupItem>\n\n                            ))}\n\n\n\n                        </ListGroup>\n\n                    )\n\n\n                    }\n                </Col>\n            </Row>\n\n            <Row className=\"justify-content-center\">\n                <Col xs={10} md={8}>\n                    <Card className=\"mt-3 rounded\">\n                        <ListGroup variant='flush'>\n                            <ListGroupItem>\n                                <h3 className=\"shop-header-large py-3 text-center\">Subtotal ({cart.cartItems.reduce((acc, item) => acc + item.qty, 0)}) Items: £{cart.cartItems.reduce((acc, item) => acc + item.qty * item.price, 0).toFixed(2)}</h3>\n                                <p></p>\n\n                            </ListGroupItem>\n                            <ListGroupItem>\n\n                                <Button\n                                    style={btnStyle}\n                                    type=\"button\"\n                                    className=\" w-100\"\n                                    disabled={cart.cartItems.length === 0}\n                                    onClick={checkOutHandler}\n                                >Proceed to Checkout!</Button>\n\n\n                            </ListGroupItem>\n\n                        </ListGroup>\n                    </Card>\n                </Col>\n\n            </Row >\n        </>\n    )\n}\n\nexport default CartScreen","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/OrderScreen.jsx",[],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/ReviewOrderScreen.jsx",["253","254","255","256","257","258","259"],"import React, { useEffect, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Row, Col, ListGroupItem, Image, Form, Button, ListGroup, Card, Container, FormControl } from 'react-bootstrap'\nimport { saveShippingAddress, addToCart, removeFromCart, createOrder } from '../Actions/cartActions'\nimport CheckoutProgressBar from '../Components/CheckoutProgressBar'\nimport FormContainer from '../Components/FormContainer'\nimport Message from '../Components/Message'\n\nimport DatePicker from 'react-date-picker'\n\n\nconst ReviewOrderScreen = ({ match, location, history }) => {\n\n    const productId = match.params.id\n\n    //whatever is in the url after the ? will store in qty\n    const qty = location.search ? Number(location.search.split('=')[1]) : 1\n    //console.log(qty)\n\n    const dispatch = useDispatch()\n\n    const cart = useSelector(state => state.cart)\n    const userInfo = useSelector(state => state.userLogin.userInfo)\n\n\n    const { shippingAddress } = cart\n    const { cartItems } = cart\n    const [name, setName] = useState(userInfo.name)\n    const [email, setEmail] = useState(userInfo.email)\n    const [address, setAddress] = useState(userInfo.address)\n\n    const [streetAddress, setStreetAddress] = useState()\n    const [town, setTown] = useState()\n    const [county, setCounty] = useState()\n    const [postcode, setPostcode] = useState()\n    const [delivery, setDelivery] = useState(false)\n    const [deliveryFee, setDeliveryFee] = useState(0)\n    const [startDate, setStartDate] = useState(new Date())\n\n    const [message, setMessage] = useState(null)\n\n\n\n    useEffect(() => {\n        //setMessage('Basket Empty!')\n        setStartDate(new Date(Date.now() + (3600 * 1000 * 24)))\n\n        if (productId) {\n            dispatch(addToCart(productId, qty))\n        }\n\n        if (userInfo) {\n            const addressData = address.split(',')\n            setStreetAddress(addressData[0])\n            setTown(addressData[1])\n            setCounty(addressData[2])\n            setPostcode(addressData[3])\n        }\n\n        //alert(delivery)\n\n    }, [dispatch, userInfo, productId, qty, delivery])\n\n\n\n    const removeFromCartHandler = (id) => {\n        dispatch(removeFromCart(id))\n    }\n\n    const deliveryOption = (e) => {\n\n        if (e === true) {\n            setDelivery('true')\n            setDeliveryFee(0)\n\n        }\n        else {\n            setDelivery('false')\n            setDeliveryFee(3)\n\n        }\n    }\n\n\n\n\n\n    const submitHandler = () => {\n\n        let billingAddress = `${streetAddress}, ${town}, ${county}`\n        const totalPrice = Number(cart.cartItems.reduce((acc, item) => acc + item.qty * item.price, 0) + deliveryFee + 3).toFixed(2)\n        let PostCode = `${postcode}`\n        dispatch(saveShippingAddress({ name, email, billingAddress, delivery, deliveryFee, startDate }))\n        dispatch(createOrder({ name, email, billingAddress, PostCode, totalPrice, cartItems, delivery, deliveryFee }))\n\n        history.push('/review/order/pay')\n    }\n\n    const goBack = () => {\n        history.goBack()\n    }\n\n    const btnStyle = {\n        display: 'block',\n        backgroundColor: 'black',\n        color: 'white',\n        fontFamily: 'arial',\n        letterSpacing: '0.2rem',\n        borderRadius: \"0\",\n        alignItems: 'center',\n        justifyContent: 'center',\n        textDecoration: 'none',\n        display: 'block'\n    }\n\n    return (\n        <>\n            <Container>\n                <Row className=\"justify-content-center\">\n                    <Col xs={10}>\n                        <CheckoutProgressBar val={60} />\n                    </Col>\n                </Row>\n            </Container>\n            <Row className=\"justify-content-center\" >\n\n                <Col xs={10}>\n\n                    <h2 className=\"shop-header-large py-3 text-center\">review order</h2>\n                    {cart.cartItems.length === 0 ? (<h2>Your basket is empty!<Link className=\"btn btn-warning rounded mx-3\" onClick={goBack}>Back to Shop?</Link></h2>\n                    ) : (\n                        <ListGroup variant=\"flush\">\n\n                            {cart.cartItems.map(item => (\n                                <ListGroupItem key={item.product}>\n                                    <Row>\n                                        <Col xs={3} md={3}>\n                                            <Image src={item.image} alt={item.name} fluid rounded />\n                                        </Col>\n                                        <Col xs={3} md={3}>\n                                            <h3 className=\"checkout-link-lg mt-4\" ><Link to={`/product/${item.product}`}>{item.name}</Link></h3>\n                                        </Col>\n                                        <Col xs={2} md={2}>\n                                            <p className=\"checkout-text-lg mt-4\">£{item.price}</p>\n                                        </Col>\n                                        <Col xs={2} md={2}>\n                                            <Form.Control className=\"mt-3\" as='select' value={item.qty} onChange={(e) => dispatch(addToCart(item.product, Number(e.target.value)))}>\n                                                {\n                                                    [...Array(item.stock).keys()].map(x => (\n                                                        <option key={x + 1} value={x + 1}> {x + 1}</option>\n                                                    ))\n                                                }\n                                            </Form.Control>\n                                        </Col>\n                                        <Col xs={2} md={2}>\n                                            <Button\n                                                type=\"button\"\n                                                style={btnStyle}\n                                                className=\"btn mt-4 p-1 w-100\"\n                                                onClick={() => removeFromCartHandler(item.product)}>\n\n                                                X\n                                             </Button>\n                                        </Col>\n                                    </Row>\n                                </ListGroupItem>\n\n                            ))}\n\n\n                            <ListGroupItem>\n                                <p className=\"checkout-text py-1\">Not done?</p>\n                                <Link style={btnStyle} className=\"btn mx-3\" onClick={goBack}>Continue Shopping</Link>\n                            </ListGroupItem>\n                        </ListGroup>\n\n                    )\n\n\n                    }\n                </Col>\n            </Row>\n            <Row className=\"justify-content-center\">\n\n                <Col className=\"text-center\" xs={8}>\n\n\n                    <h3 className=\"shop-header py-3\">Subtotal ({cart.cartItems.reduce((acc, item) => acc + item.qty, 0)}) Items: £{cart.cartItems.reduce((acc, item) => acc + item.qty * item.price, 0).toFixed(2)}</h3>\n\n\n                </Col>\n            </Row>\n\n            <Row>\n                <Container>\n                    <FormContainer>\n                        <h2 className=\"shop-header-large py-3 text-center\">confirm shipping/billing</h2>\n                        <h4 className=\"checkout-text text-center\">this is your billing and shipping address</h4>\n\n                        <Form onSubmit={submitHandler}>\n                            <Form.Group controlId='name'>\n                                <Form.Label>Name</Form.Label>\n                                <FormControl\n                                    type='name'\n                                    placeholder='Enter name...'\n                                    value={name}\n                                    onChange={(e) => setName(e.target.value)}\n                                ></FormControl>\n                            </Form.Group>\n\n\n\n                            <Form.Group controlId='streetAddress'>\n                                <Form.Label>Street Address</Form.Label>\n                                <FormControl\n                                    type='streetAddress'\n                                    placeholder='Enter street address...'\n                                    value={streetAddress}\n                                    onChange={(e) => setStreetAddress(e.target.value)}\n                                ></FormControl>\n                            </Form.Group>\n\n                            <Form.Group controlId='town'>\n                                <Form.Label>Town</Form.Label>\n                                <FormControl\n                                    type='town'\n                                    placeholder='Enter town...'\n                                    value={town}\n                                    onChange={(e) => setTown(e.target.value)}\n                                ></FormControl>\n                            </Form.Group>\n\n                            <Form.Group controlId='county'>\n                                <Form.Label>County</Form.Label>\n                                <FormControl\n                                    type='county'\n                                    placeholder='Enter county...'\n                                    value={county}\n                                    onChange={(e) => setCounty(e.target.value)}\n                                ></FormControl>\n                            </Form.Group>\n\n\n                            <Form.Group controlId='postcode'>\n                                <Form.Label>Postcode</Form.Label>\n                                <FormControl\n                                    type='postcode'\n                                    placeholder='Enter postcode...'\n                                    value={postcode}\n                                    onChange={(e) => setPostcode(e.target.value)}\n                                ></FormControl>\n                            </Form.Group>\n\n                            <Form.Group controlId='delivery'>\n                                <Form.Label>Select Delivery Method</Form.Label>\n\n                                <Col>\n                                    <Form.Check\n                                        type='radio'\n                                        label='Collection from store'\n                                        id='Stripe'\n                                        name='delivery'\n                                        value={false}\n                                        checked\n                                        onClick={(e) => deliveryOption(e.target.value)}\n                                    ></Form.Check>\n                                    <Form.Check\n                                        type='radio'\n                                        label='Bicycle Delivery'\n                                        name='delivery'\n                                        value={true}\n                                        onClick={(e) => deliveryOption(e.target.value)}\n                                    ></Form.Check>\n                                </Col>\n                            </Form.Group>\n\n                            <Form.Group>\n\n                                <DatePicker\n                                    className=\"w-100 py-3\"\n                                    onChange={setStartDate}\n                                    value={startDate}\n                                    minDate={startDate}\n                                    disableCalendar={false}\n                                    showLeadingZeros={true}\n                                />\n\n\n                            </Form.Group>\n                            <Form.Group >\n                                <Col className='my-2 text-right'>\n                                    <h2 className=\"shop-header py-3 \">Delivery fee: £{deliveryFee}</h2>\n                                    <h4 className=\"shop-text \">this is calculated at a flat rate</h4>\n                                </Col>\n\n\n                            </Form.Group>\n\n                            <Form.Group className='my-2 text-center'>\n                                {message && <Message variant='danger'>{message}</Message>}\n                            </Form.Group>\n\n                            <Button\n                                type='submit'\n                                className=\"w-100 mt-3\"\n                                style={btnStyle}\n                            >proceed to payment</Button>\n\n\n                        </Form>\n                    </FormContainer>\n                </Container>\n            </Row>\n\n\n\n\n\n        </>\n    )\n}\n\nexport default ReviewOrderScreen","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/ResultsScreen.jsx",["260","261","262"],"import React, { useEffect } from 'react'\nimport { Button, Row, Col, Container } from 'react-bootstrap'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { searchProducts } from '../Actions/productActions'\nimport Product from '../Components/Product'\nimport Retailer from '../Components/Retailer'\nimport Town from '../Components/Town'\n\n\nimport Loader from '../Components/Loader'\nimport Message from '../Components/Message'\n\nconst ResultsScreen = ({ match, history }) => {\n    //for search bar\n    const keyword = match.params.keyword\n\n\n    const dispatch = useDispatch()\n\n    const searchAll = useSelector(state => state.searchAll)\n    const { loading, error, result } = searchAll\n    const { products, towns, retailers } = useSelector(state => state.searchAll.result)\n    useEffect(() => {\n\n        dispatch(searchProducts(keyword))\n\n    }, [dispatch, keyword])\n\n    const goBack = () => {\n        history.goBack()\n    }\n\n    const btnStyle = {\n        display: 'block',\n        backgroundColor: 'black',\n        color: 'white',\n        fontFamily: 'arial',\n        letterSpacing: '0.2rem',\n        borderRadius: \"0\",\n        alignItems: 'center',\n        justifyContent: 'center',\n        textDecoration: 'none',\n        display: 'block'\n    }\n\n    return (\n        <>\n            {loading ? (<Loader />) : (\n                <Container>\n                    <h1 className=\"shop-header-large py-3 text-center\">Here's what we can find for \"{keyword}\"</h1>\n                    <h1 className=\"shop-header py-3 text-center\">This is what \"{keyword}\" turned up in our partners product ranges</h1>\n                    <Row>\n\n\n                        {!products ? (<Message>No Results, sorry!</Message>)\n                            : (\n\n                                products.map(product => (\n                                    <Col className=\"p-0\" xs={6} md={6} lg={4}>\n                                        <Product product={product} />\n                                    </Col>\n                                ))\n\n                            )}\n\n\n                    </Row>\n                    <h1 className=\"shop-header py-3 text-center\">These are the retailers that might respond to being called \"{keyword}\"</h1>\n                    <Row>\n\n                        <>\n                            {!retailers ? (<Message>No Results, sorry!</Message>)\n                                : (\n\n                                    retailers.map(retailer => (\n                                        <Col className=\"p-0\" xs={6} md={6} lg={4}>\n                                            <Retailer retailer={retailer} />\n                                        </Col>\n                                    ))\n\n                                )}\n\n                        </>\n\n\n                    </Row>\n                    <Row>\n                        <h1 className=\"shop-header py-3 text-center\">And just in case, these our our partner locations that go by \"{keyword}\"</h1>\n\n                        <>\n                            {!towns ? (<Message>No Results, sorry!</Message>)\n                                : (\n\n                                    towns.map(town => (\n                                        <Col className=\"p-0\" xs={3}>\n                                            <Town town={town} />\n                                        </Col>\n                                    ))\n\n                                )}\n\n                        </>\n                    </Row>\n                    <Row>\n                        <p className=\"shop-header py-3 text-center\">can't find what you need?</p>\n                        <Button onClick={goBack} type=\"submit\" style={btnStyle} className=\" w-100\">\n                            Search again?\n                            </Button>\n                    </Row>\n\n                </Container>\n            )}\n        </>\n    )\n\n}\n\nexport default ResultsScreen\n","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/AboutScreen.jsx",[],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/PaymentScreen.jsx",["263","264","265","266","267","268","269","270"],"import React, { useEffect, useState } from 'react'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Row, Col, Card, Container, } from 'react-bootstrap'\nimport { addToCart, removeFromCart } from '../Actions/cartActions'\nimport CheckoutProgressBar from '../Components/CheckoutProgressBar'\n\n\n//stripe\nimport { Elements } from \"@stripe/react-stripe-js\"\nimport CreditCardForm from '../PaymentWidgets/CreditCardForm'\nimport { loadStripe } from \"@stripe/stripe-js\"\n\n\nconst PaymentScreen = ({ match, location, history }) => {\n\n    const productId = match.params.id\n\n    //whatever is in the url after the ? will store in qty\n    const qty = location.search ? Number(location.search.split('=')[1]) : 1\n    //console.log(qty)\n\n    const dispatch = useDispatch()\n\n    const cart = useSelector(state => state.cart)\n\n    const userInfo = useSelector(state => state.userLogin.userInfo)\n\n\n\n    const { shippingAddress } = cart\n\n\n    const [message, setMessage] = useState(null)\n\n\n\n    useEffect(() => {\n\n\n        if (productId) {\n            dispatch(addToCart(productId, qty))\n        }\n\n\n\n        //alert(delivery)\n\n    }, [dispatch, userInfo, productId, qty])\n\n\n\n    const removeFromCartHandler = (id) => {\n        dispatch(removeFromCart(id))\n    }\n\n\n    const checkOutHandler = () => {\n\n        if (userInfo.length === 0 || !userInfo) {\n\n            history.push('/register')\n        }\n        else {\n            history.push('/checkout')\n        }\n    }\n\n\n\n    const goBack = () => {\n        history.goBack()\n    }\n\n    const btnStyle = {\n        display: 'block',\n        backgroundColor: 'black',\n        color: 'white',\n        fontFamily: 'arial',\n        letterSpacing: '0.2rem',\n        borderRadius: \"0\",\n        alignItems: 'center',\n        justifyContent: 'center',\n        textDecoration: 'none',\n        display: 'block'\n    }\n\n    const cardStyle = {\n        border: 'none'\n    }\n\n    return (\n        <>\n            <Container>\n                <Row Row className=\"justify-content-center\">\n                    <h2 className=\"shop-header-large py-3 text-center\">almost there!</h2>\n                    <Col xs={10}>\n                        <CheckoutProgressBar val={85} />\n                    </Col>\n                </Row>\n            </Container>\n            <Container>\n                <Row className=\"justify-content-center\">\n                    <h2 className=\"shop-header-large py-3 text-center\">enter payment details</h2>\n                    <Col xs={2} className=\"justify-content-center\">\n                        <img className=\"w-100\" src={'/images/paymentcard.jpg'} alt='credit card logos' />\n                    </Col>\n                </Row>\n                <Row className=\"justify-content-center\">\n                    <Col xs={8} className='my-2 text-right'>\n                        <h4 className=\"checkout-text py-3 \">Total Includes all delivery charges and a handling fee of £{3} to handle lify’s operating costs, and to ensure sellers retain 100% of the money you send them</h4>\n\n                    </Col>\n                </Row>\n                <Row>\n                    <Card style={cardStyle} id=\"paymentWidgetContainerCard\">\n\n\n\n                        <Card.Body>\n\n\n                            <Elements\n                                stripe={loadStripe(\"pk_test_51IUavEFV3SCXvY9fubZHWbPtve3bWc9yFTuEM5Cx05OEblstUpwW67DwVEcYVMciTAFImsZeyshfX9MVQvGdftLQ00uES24w7o\")}\n                            >\n                                <CreditCardForm order={cart.order} />\n                            </Elements>\n                        </Card.Body>\n                    </Card>\n                </Row>\n            </Container>\n\n\n\n\n\n\n\n\n\n\n\n        </>\n    )\n}\n\nexport default PaymentScreen","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/SearchScreen.jsx",["271"],"import React, { useState } from 'react'\nimport { Form, Button, Row, Col } from 'react-bootstrap'\nimport Message from '../Components/Message'\nimport FormContainer from '../Components/FormContainer'\n\nconst SearchScreen = ({ history }) => {\n    const [keyword, setKeyword] = useState('')\n    const [message, setMessage] = useState('')\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        if (keyword === '') {\n            setMessage('Enter a search term to search!')\n        }\n        else if (keyword.trim()) {\n            history.push(`/results/${keyword}`)\n        }\n\n    }\n\n    const btnStyle = {\n        display: 'block',\n        backgroundColor: 'black',\n        color: 'white',\n        fontFamily: 'arial',\n        letterSpacing: '0.2rem',\n        borderRadius: \"0\",\n        alignItems: 'center',\n        justifyContent: 'center',\n        textDecoration: 'none',\n        display: 'block'\n    }\n\n    return (\n        <>\n            <h2 className=\"shop-header-large py-3 text-center\">looking for something?</h2>\n            <h4 className=\"shop-header  text-center\">search for products, shops or locations</h4>\n\n            <FormContainer>\n                <Form onSubmit={submitHandler} className=\"form-search\">\n                    {message && <Message>{message}</Message>}\n                    <Row>\n\n                        <Form.Control\n                            name='q'\n                            onChange={(e) => setKeyword(e.target.value)}\n                            className=\"my-3\"\n                            id=\"inlineFormInput\"\n                            placeholder=\"search for something!\"\n                        />\n\n\n\n                        <Col>\n                            <Button type=\"submit\" style={btnStyle} className=\"my-2 w-100\">\n                                Search\n                            </Button>\n                        </Col>\n                    </Row>\n                </Form>\n            </FormContainer>\n        </>\n    )\n\n}\n\nexport default SearchScreen\n","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/RetailerOrdersScreen.jsx",["272","273","274","275","276","277","278","279","280"],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/RetailerOrderReviewScreen.jsx",["281","282","283","284","285"],"import React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Row, Col, ListGroup, Image, Card, Button, ListGroupItem, Container } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../Components/Loader'\nimport Message from '../Components/Message'\nimport { deliverOrder, getRetailerOrderDetails } from '../Actions/orderActions'\nimport { getCustomerDetails } from '../Actions/userActions'\nimport { listRetailerOwnerDetails } from '../Actions/retailerActions'\n\n\nconst RetailerOrderReviewScreen = ({ match, history }) => {\n\n    const orderId = match.params.id\n\n    const dispatch = useDispatch()\n\n\n\n    const userLogin = useSelector((state) => state.userLogin)\n    const { userInfo } = userLogin\n\n    const retailerOrderDetails = useSelector((state) => state.retailerOrderDetails)\n    const { order, loading, error } = retailerOrderDetails\n\n    const customerDetails = useSelector((state) => state.customerDetails)\n    const { customer, loading: loadingCustomer, error: errorCustomer } = customerDetails\n\n    const orderDeliver = useSelector((state) => state.orderDeliver)\n    const { loading: loadingDeliver, success: successDeliver } = orderDeliver\n\n    const retailerDetailsOwner = useSelector(state => state.retailerDetailsOwner)\n    const { retailerDetail, loading: loadingRDetails, error: errorRDetails } = retailerDetailsOwner\n\n\n    //calculate prices\n\n    if (!loading) {\n        //round to two decimals\n        const addDecimals = (num) => {\n            return (Math.round(num * 100 / 100).toFixed(2))\n        }\n\n        order.itemsPrice = addDecimals(order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0))\n        order.shippingPrice = addDecimals(5)\n        order.handling = addDecimals(Number((order.itemsPrice * 0.0255).toFixed(2)))\n        order.totalPrice = addDecimals((Number(order.itemsPrice) + Number(order.shippingPrice) + Number(order.handling)))\n    }\n\n\n\n\n\n    useEffect(() => {\n\n        if (!userInfo || userInfo.length === 0) {\n            history.push('/login')\n        }\n\n\n\n        if (!order || order._id !== orderId || successDeliver) {\n\n            // dispatch({ type: ORDER_PAY_RESET })\n            dispatch({ type: 'ORDER_DELIVER_RESET' })\n            dispatch(getRetailerOrderDetails(orderId))\n            dispatch(listRetailerOwnerDetails(userInfo._id))\n        }\n\n        if (order && order._id && !customer.name) {\n            dispatch(getCustomerDetails(order.customer))\n        }\n\n\n\n    }, [dispatch, customer, orderId, order, successDeliver, history, userInfo])\n\n\n    const deliverHandler = () => {\n        dispatch(deliverOrder(order))\n    }\n\n    const btnStyle = {\n        display: 'block',\n        backgroundColor: 'black',\n        color: 'white',\n        fontFamily: 'arial',\n        letterSpacing: '0.2rem',\n        borderRadius: \"0\",\n        alignItems: 'center',\n        justifyContent: 'center',\n        textDecoration: 'none',\n        display: 'block'\n    }\n\n\n    return loading ? (<Loader />)\n        : (\n            <>\n                {retailerDetail &&\n                    <img className=\"w-100\" src={retailerDetail.image} alt=\"account banner\" />\n                }\n                {loadingCustomer ? (<Loader />) : (\n                    <Container>\n\n                        <h1 className='shop-header-large py-4 text-center'>Your Order Reference: {order._id.slice(-6)}</h1>\n\n                        <Row>\n                            <Col md={8}>\n                                <ListGroup variant='flush'>\n                                    <ListGroup.Item className=\"checkout-text py-2\">\n                                        <>\n                                            <h3 className='shop-header-large py-3 text-center'>Customer Details</h3>\n                                            {order.isCollection ? <Message variant=\"info\">this order is for collection only</Message> :\n                                                <Message variant='info'>this order is for delivery</Message>}\n                                            <strong>Name:</strong>{customer.name}<br></br>\n                                            <strong>Email: </strong><a href={`mailto:${customer.email}`}>{customer.email}</a><br></br>\n                                            <strong>Address: </strong>\n                                            {customer.address}\n                                            <br></br><br></br>\n                                            {order.isReady ? <Message variant=\"success\">order marked as ready</Message> :\n                                                <Message variant='danger'>you have not marked this as ready for collection/delivery!</Message>}\n                                        </>\n\n                                    </ListGroup.Item>\n\n                                    {loadingDeliver && <Loader />}\n                                    {userInfo && userInfo.isRetailer && order.isPaid && !order.isDispatched && (\n                                        <ListGroupItem>\n                                            <Button style={btnStyle} type=\"button\" className=\"btn w-100\" onClick={deliverHandler}>Mark as Ready</Button>\n                                        </ListGroupItem>\n                                    )}\n\n\n                                    <ListGroup.Item className=\"checkout-text\">\n                                        <h3 className='shop-header-large py-3 text-center'>Review Items</h3>\n                                        {order.orderItems.length === 0 ? <Message>Order is empty!</Message> : (\n                                            <ListGroup variant='flush'>\n                                                {order.orderItems.map((item, index) => (\n                                                    <ListGroup.Item key={index}>\n                                                        <Row>\n                                                            <Col md={1}>\n                                                                <Image src={item.image} alt={item.name} fluid rounded />\n                                                            </Col>\n                                                            <Col>\n                                                                <Link to={`/product/${item.product}`}>\n                                                                    {item.name}\n                                                                </Link>\n                                                            </Col>\n                                                            <Col md={4}>\n                                                                {item.qty} x £{item.price} = £{item.qty * item.price}\n                                                            </Col>\n                                                        </Row>\n                                                    </ListGroup.Item>\n                                                ))}\n                                            </ListGroup>\n                                        )}\n                                    </ListGroup.Item>\n                                    <ListGroup.Item className=\"checkout-text\">\n                                        <h3 className='shop-header-large py-3 text-center'>Payment Method</h3>\n\n                                        <strong>Method: </strong>\n                                        {order.paymentMethod}<br>\n                                        </br>\n                                        <br></br>\n\n                                        <>\n                                            {order.isPaid ? <Message variant=\"success\">payment completed on: {order.createdAt.substring(0, 10)}</Message> :\n                                                <>\n                                                    <Message variant='danger'>Payment not yet Complete</Message>\n                                                </>}\n                                        </>\n                                    </ListGroup.Item>\n\n\n                                </ListGroup>\n                            </Col>\n\n                            <Col md={4}>\n                                <Card>\n                                    <ListGroup variant='flush'>\n                                        <ListGroupItem>\n                                            <h2 className='shop-header-large py-4 text-center'>Order Summary</h2>\n                                        </ListGroupItem>\n                                        <ListGroupItem>\n                                            <Row>\n                                                <Col className=\"checkout-text\">Items - Your Payment Due</Col>\n                                                <Col className=\"checkout-text\">£ {order.itemsPrice}</Col>\n                                            </Row>\n                                        </ListGroupItem>\n                                        <ListGroupItem>\n                                            <Row>\n                                                <Col className=\"checkout-text\">Shipping Price (customer ref only)</Col>\n                                                <Col className=\"checkout-text\">£ {order.shippingPrice}</Col>\n                                            </Row>\n                                        </ListGroupItem>\n                                        <ListGroupItem>\n                                            <Row>\n                                                <Col className=\"checkout-text\">lify fees (paid by customer)</Col>\n                                                <Col className=\"checkout-text\">£ {order.handling}</Col>\n                                            </Row>\n                                        </ListGroupItem>\n\n                                        <ListGroupItem>\n                                            <Row>\n                                                <Col><strong className=\"checkout-text\">Total</strong></Col>\n                                                <Col><h3 className=\"checkout-text\">£ {order.totalPrice}</h3></Col>\n                                            </Row>\n                                        </ListGroupItem>\n\n                                    </ListGroup>\n                                </Card>\n                            </Col>\n                        </Row>\n\n                    </Container>\n                )}\n            </>\n\n        )\n}\n\nexport default RetailerOrderReviewScreen","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/ProductEditScreen.jsx",["286","287","288"],"import React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Form, Button, FormControl, Container } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { listProductDetails, updateProduct } from '../Actions/productActions'\nimport FormContainer from '../Components/FormContainer'\nimport { listRetailerOwnerDetails } from '../Actions/retailerActions'\nimport Loader from '../Components/Loader'\nimport Message from '../Components/Message'\n\nimport axios from 'axios'\n\n\n\n\nconst ProductEditScreen = ({ match, history }) => {\n\n    const productId = match.params.id\n\n    const [name, setName] = useState('')\n    const [price, setPrice] = useState(0)\n    const [stock, setStock] = useState(0)\n    const [image, setImage] = useState('')\n    const [canDeliver, setCanDeliver] = useState(false)\n    const [description, setDescription] = useState('')\n    const [uploading, setUploading] = useState(false)\n\n\n    const dispatch = useDispatch()\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n    const productDetails = useSelector(state => state.productDetails)\n    const { loading, error, product } = productDetails\n\n    const retailerDetailsOwner = useSelector(state => state.retailerDetailsOwner)\n    const { retailerDetail, loading: loadingRDetails, error: errorRDetails } = retailerDetailsOwner\n\n\n    const productUpdate = useSelector(state => state.productUpdate)\n    const {\n        loading: loadingUpdate,\n        error: errorUpdate,\n        success: successUpdate\n    } = productUpdate\n\n\n    const btnStyle = {\n        display: 'block',\n        backgroundColor: 'black',\n        color: 'white',\n        fontFamily: 'arial',\n        letterSpacing: '0.2rem',\n        borderRadius: \"0\",\n        alignItems: 'center',\n        justifyContent: 'center',\n        textDecoration: 'none',\n        display: 'block'\n    }\n\n    useEffect(() => {\n\n        if (successUpdate) {\n            dispatch({ type: 'PRODUCT_UPDATE_RESET' })\n            history.push('/retailer/productList')\n\n        }\n        else {\n\n            if (!product.name) {\n                dispatch(listProductDetails(productId))\n                dispatch(listRetailerOwnerDetails(userInfo._id))\n            }\n            else {\n                setName(product.name)\n                setPrice(product.price)\n\n                setStock(product.stock)\n                setImage(product.image)\n                setDescription(product.description)\n            }\n        }\n\n    }, [dispatch, history, productId, product, successUpdate])\n\n    const uploadFileHandler = async (e) => {\n        const file = e.target.files[0]\n        const formData = new FormData()\n        formData.append('image', file)\n        setUploading(true)\n\n        try {\n            const config = {\n                headers: {\n                    'Content-Type': \"multipart/form-data\"\n                }\n            }\n\n            const { data } = await axios.post('/api/upload', formData, config)\n            setImage(data)\n            setUploading(false)\n        }\n        catch (error) {\n            console.error(error)\n            setUploading(false)\n        }\n    }\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(updateProduct(\n            {\n                _id: productId,\n                name,\n                price,\n                canDeliver,\n                stock,\n                image,\n                description\n            }\n        ))\n    }\n\n    return (\n        <>\n            {loadingRDetails ? (<Loader />) : (\n                <>\n                    <img className=\"w-100\" src={retailerDetail.image} alt=\"account banner\"></img>\n\n\n                </>\n            )}\n            <Container>\n                <Link to=\"/retailer/productList\" style={btnStyle} className=\"btn my-3\">Back to All Products</Link>\n\n                <FormContainer>\n                    <h1 className='shop-header-large py-3 text-center'>Edit Product</h1>\n                    {loadingUpdate && <Loader />}\n                    {errorUpdate && <Message varient='danger'>{errorUpdate}</Message>}\n                    {error && <Message variant='danger'>{error}</Message>}\n                    {loading ? <Loader /> :\n                        (\n\n                            <Form onSubmit={submitHandler}>\n                                <Form.Group controlId='name'>\n                                    <h4 className=\"checkout-text text-center py-3\">product display name</h4>\n                                    <FormControl\n                                        type='name'\n                                        placeholder={product.name}\n                                        value={name}\n                                        onChange={(e) => setName(e.target.value)}\n                                    ></FormControl>\n                                </Form.Group>\n                                <Form.Group controlId='price'>\n                                    <h4 className=\"checkout-text text-center py-3\">set price</h4>\n                                    <FormControl\n                                        type='number'\n                                        placeholder={product.price}\n                                        value={price}\n                                        onChange={(e) => setPrice(e.target.value)}\n                                    ></FormControl>\n                                </Form.Group>\n\n                                <Form.Group controlId='image'>\n                                    <h4 className=\"checkout-text text-center py-3\">image upload</h4>\n                                    <FormControl\n                                        type='text'\n                                        placeholder={product.image}\n                                        value={image}\n                                        onChange={(e) => setImage(e.target.value)}\n                                    ></FormControl>\n                                    <br>\n                                    </br>\n                                    <p>OR</p>\n                                    <Form.File\n                                        id='image-file'\n                                        label='Upload file...'\n                                        custom\n                                        onChange={uploadFileHandler}>\n\n                                    </Form.File>\n                                    {uploading && <h3>Loading...</h3>}\n                                </Form.Group>\n\n\n\n                                <Form.Group controlId='stock'>\n                                    <h4 className=\"checkout-text text-center py-3\">stock level</h4>\n                                    <FormControl\n                                        type='number'\n                                        placeholder={product.stock}\n                                        value={stock}\n                                        onChange={(e) => setStock(e.target.value)}\n                                    ></FormControl>\n                                </Form.Group>\n\n                                <Form.Group controlId='description'>\n                                    <h4 className=\"checkout-text text-center py-3\">product description</h4>\n                                    <FormControl\n                                        type='text'\n                                        placeholder={product.description}\n                                        value={description}\n                                        onChange={(e) => setDescription(e.target.value)}\n                                    ></FormControl>\n                                </Form.Group>\n                                <Form.Group controlId='canDeliver'>\n                                    <h4 className=\"checkout-text text-center py-3\">can it be delivered?</h4>\n                                    <FormControl\n                                        type='text'\n                                        placeholder='No'\n                                        onChange={(e) => setCanDeliver(e.target.value)}\n                                        as=\"select\">\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                    </FormControl>\n                                </Form.Group>\n\n                                <Button\n                                    type='submit'\n                                    style={btnStyle}\n                                    className=\"w-100 my-3\">save changes</Button>\n\n\n                            </Form>\n                        )}\n\n\n\n                </FormContainer>\n            </Container>\n        </>\n\n    )\n}\n\nexport default ProductEditScreen","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/ProductListScreen.jsx",["289","290","291","292"],"import React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Table, Button, Row, Col, Container } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { listProductsManage, deleteProduct, createProduct } from '../Actions/productActions'\nimport { listRetailerOwnerDetails } from '../Actions/retailerActions'\nimport Loader from '../Components/Loader'\n\nconst ProductListScreen = ({ history, match }) => {\n\n    const dispatch = useDispatch()\n\n    const productManageList = useSelector(state => state.productManageList)\n    const { loading, error, products } = productManageList\n\n    const productDelete = useSelector(state => state.productDelete)\n    const { loading: loadingDelete, error: errorDelete, success: successDelete } = productDelete\n\n    const productCreate = useSelector(state => state.productCreate)\n    const { loading: loadingCreate, error: errorCreate, success: successCreate, product: createdProduct } = productCreate\n\n    const retailerDetailsOwner = useSelector(state => state.retailerDetailsOwner)\n    const { retailerDetail, loading: loadingRDetails, error: errorRDetails } = retailerDetailsOwner\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n\n    const btnStyle = {\n        display: 'block',\n        backgroundColor: 'black',\n        color: 'white',\n        fontFamily: 'arial',\n        letterSpacing: '0.2rem',\n        borderRadius: \"0\",\n        alignItems: 'center',\n        justifyContent: 'center',\n        textDecoration: 'none',\n        display: 'block'\n    }\n\n    const btnDangerStyle = {\n        display: 'block',\n        backgroundColor: 'red',\n        color: 'white',\n        fontFamily: 'arial',\n        letterSpacing: '0.2rem',\n        borderRadius: \"0\",\n        alignItems: 'center',\n        justifyContent: 'center',\n        textDecoration: 'none',\n        display: 'block'\n    }\n\n\n\n    useEffect(() => {\n\n        dispatch({ type: 'PRODUCT_CREATE_RESET' })\n\n        if (!userInfo.isRetailer) {\n            history.push('/login')\n        }\n\n        if (!retailerDetail || !retailerDetail.name) {\n            dispatch(listRetailerOwnerDetails(userInfo._id))\n        }\n\n        if (successCreate) {\n            history.push(`/retailer/product/${createdProduct._id}/edit`)\n        }\n        else {\n            dispatch(listProductsManage())\n        }\n\n    }, [dispatch, history, userInfo, successDelete, successCreate, createdProduct])\n\n    const deleteHandler = (id) => {\n        if (window.confirm('Are you sure? Deletion is Permanent!')) {\n            dispatch(deleteProduct(id))\n        }\n    }\n\n    const createProductHandler = () => {\n        dispatch(createProduct())\n\n    }\n\n    return (\n        <>\n            {loadingRDetails ? (<Loader />) : (\n                <>\n                    <img className=\"w-100\" src={retailerDetail.image} alt=\"account banner\"></img>\n\n\n                </>\n            )}\n            <Row className='align-items-center'>\n                <Col>\n                    <h1 className=\"shop-header-large py-3 text-center\">Product Manager Dashboard</h1>\n                </Col>\n            </Row>\n\n            <Container>\n                <Row className='justify-center'>\n                    <Col xs={8} className='text-right'>\n                        <Button style={btnStyle} className='my-3' onClick={createProductHandler}>\n                            Create New Product\n                    </Button>\n                    </Col>\n                </Row>\n                {loadingDelete && <h2>Loading...</h2>}\n                {errorDelete && <h2 className=\"messsage-alert\">{errorDelete}.</h2>}\n                {loadingCreate && <h2>Loading...</h2>}\n                {errorCreate && <h2 className=\"messsage-alert\">{errorCreate}.</h2>}\n                {loading ? <h2>Loading...</h2> : error ? <h3>{error}</h3>\n                    :\n                    (<Table striped bordered hover responsive className=\"table-sm\">\n                        <thead>\n                            <tr>\n                                <th>ID</th>\n                                <th>Name</th>\n                                <th>Price</th>\n                                <th>Stock</th>\n                                <th>Description</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {products.map(product => (\n                                <tr key={product._id}>\n                                    <td>{product._id.slice(-6)}</td>\n                                    <td>{product.name}</td>\n                                    <td>£{product.price}</td>\n                                    <td>{product.stock}</td>\n                                    <td>{product.description}</td>\n                                    <td>\n                                        <Link to={`/retailer/product/${product._id}/edit`}>\n                                            <Button style={btnStyle} className='btn-sm w-100'>\n                                                edit\n                                            </Button>\n                                        </Link>\n                                        <Button\n                                            style={btnDangerStyle}\n                                            className='btn-sm w-100'\n                                            onClick={() => { deleteHandler(product._id) }}><span class=\"material-icons\">\n                                                delete\n                                        </span>\n                                        </Button>\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </Table>)}\n            </Container>\n        </>\n    )\n}\n\nexport default ProductListScreen","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/AvailableDeliveryScreen.jsx",["293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308"],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Screens/DeliveryScreen.jsx",["309","310","311"],"import React, { useEffect, useState } from 'react'\nimport { Row, Col, ListGroup, Image, Button, ListGroupItem, Container } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../Components/Loader'\nimport Message from '../Components/Message'\nimport { getOrderDetails } from '../Actions/orderActions'\nimport { getDeliveryData, completeDelivery } from '../Actions/courierActions'\n\n\nconst DeliveryScreen = ({ match, history }) => {\n\n    const orderId = match.params.id\n\n    const dispatch = useDispatch()\n\n    const [messages, setMessages] = useState('')\n\n    const orderDetails = useSelector((state) => state.orderDetails)\n    const { order, loading, error } = orderDetails\n\n    const userLogin = useSelector((state) => state.userLogin)\n    const { userInfo } = userLogin\n\n    const orderDeliver = useSelector((state) => state.orderDeliver)\n    const { loading: loadingDeliver, success: successDeliver } = orderDeliver\n\n    const deliveryData = useSelector(state => state.deliveryData)\n    const { loading: dataLoading, delivery } = deliveryData\n\n    const deliveryComplete = useSelector(state => state.deliveryComplete)\n    const { loading: completeLoading, success, info } = deliveryComplete\n\n    //calculate prices\n    if (!loading) {\n        //round to two decimals\n        const addDecimals = (num) => {\n            return (Math.round(num * 100 / 100).toFixed(2))\n        }\n\n        order.itemsPrice = addDecimals(order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0))\n        order.shippingPrice = addDecimals(5)\n        order.handling = addDecimals(Number((order.itemsPrice * 0.0255).toFixed(2)))\n        order.totalPrice = addDecimals((Number(order.itemsPrice) + Number(order.shippingPrice) + Number(order.handling)))\n    }\n\n\n\n\n    useEffect(() => {\n\n        if (!userInfo || userInfo.length === 0) {\n            history.push('/login')\n        }\n\n\n\n        if (!order || order._id !== orderId || successDeliver) {\n            // dispatch({ type: ORDER_PAY_RESET })\n            // dispatch({ type: ORDER_DELIVER_RESET })\n            dispatch(getOrderDetails(orderId))\n            dispatch(getDeliveryData(orderId))\n        }\n\n\n        if (success) {\n            setMessages('hello')\n        }\n\n\n    }, [dispatch, order, orderId, successDeliver, history, userInfo, success])\n\n\n    const completeHandler = () => {\n        //dispatch(deliverOrder(order))\n\n        dispatch(completeDelivery(order))\n    }\n\n    const btnStyle = {\n        display: 'block',\n        backgroundColor: 'black',\n        color: 'white',\n        fontFamily: 'arial',\n        letterSpacing: '0.2rem',\n        borderRadius: \"0\",\n        alignItems: 'center',\n        justifyContent: 'center',\n        textDecoration: 'none',\n        display: 'block'\n    }\n\n\n    return loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message>\n        :\n        <>\n            <img src={'/images/courier.jpg'} alt=\"courier banner\" className='w-100' />\n            <Container >\n\n                <h1 className='shop-header-large py-4 text-center'>Customers Order Ref: {(order._id).slice(-6)}</h1>\n                <Row className=\"justify-content-center\">\n                    <Col md={10}>\n                        <ListGroup variant='flush'>\n                            <ListGroup.Item className=\"checkout-text py-2\">\n                                <h3 className='shop-header-large py-3 text-center'>customer details</h3>\n                                <strong>Deliver to:</strong>{order.user.name}<br></br>\n                                <strong>Address: </strong>\n                                {order.shippingAddress}, {order.postcode}\n                                <br></br><br></br>\n\n                            </ListGroup.Item>\n\n                            {loadingDeliver && <Loader />}\n                            {userInfo && userInfo.isAdmin && order.isPaid && !order.isDelivered && (\n                                <ListGroupItem>\n                                    <Button type=\"button\" className=\"btn btn-block btn-primary\" >Mark as Dispatched</Button>\n                                </ListGroupItem>\n                            )}\n\n                            {dataLoading ? (<Loader />) : (\n                                <ListGroup.Item className=\"checkout-text\">\n                                    <h3 className='shop-header-large py-3 text-center'>items and pick up locations</h3>\n                                    {order.orderItems.length === 0 ? <Message>Order is empty!</Message> : (\n                                        <ListGroup variant='flush'>\n\n                                            {order.orderItems.map((item, index) => (\n                                                <ListGroup.Item key={index}>\n                                                    <Row>\n                                                        <Col md={1}>\n                                                            <Image src={item.image} alt={item.name} fluid rounded />\n                                                        </Col>\n                                                        <Col>\n\n                                                            {item.name}\n\n                                                        </Col>\n                                                        <Col md={3}>\n                                                            QTY:<b>{item.qty}</b>\n                                                        </Col>\n                                                        <Col md={3}>\n                                                            {delivery.stops[index].name}\n                                                        </Col>\n                                                        <Col md={3}>\n                                                            {delivery.stops[index].address}\n                                                        </Col>\n                                                    </Row>\n                                                </ListGroup.Item>\n                                            ))}\n                                        </ListGroup>\n                                    )}\n                                </ListGroup.Item>\n                            )}\n                            <>\n                                {dataLoading ? (<Loader />) : (\n                                    <ListGroup.Item>\n                                        <iframe\n                                            className=\"w-100\"\n                                            title=\"map\"\n                                            height=\"500px\"\n                                            src={delivery.mapData}>\n                                        </iframe>\n                                    </ListGroup.Item>\n                                )}\n                            </>\n                            <ListGroup.Item className=\"checkout-text\">\n                                <h3 className='shop-header-large py-3 text-center '>Mark as Delivered!</h3>\n                                {success ? (<Message variant=\"success\">{info.message}</Message>) : (\n                                    <>\n                                        {!order.isDelivered ? (\n                                            <Button className=\"w-100\" onClick={() => completeHandler(order)} style={btnStyle}>\n\n                                                it's in the customer's hands\n\n                                            </Button>\n                                        ) : (\n                                            <Message variant=\"success\">ordered delivered on: {order.deliveredAt}</Message>\n                                        )}\n                                    </>\n                                )}\n                            </ListGroup.Item>\n\n\n                        </ListGroup>\n                    </Col>\n\n\n\n                </Row>\n\n            </Container>\n        </>\n}\n\nexport default DeliveryScreen","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Actions/courierActions.js",[],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Actions/townActions.js",[],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Actions/retailerActions.js",[],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Actions/orderActions.js",[],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Actions/cartActions.js",[],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Actions/productActions.js",[],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Actions/userActions.js",[],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Components/Loader.jsx",[],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Components/Message.jsx",[],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Components/FormContainer.jsx",[],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Components/Retailer.jsx",[],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Components/Product.jsx",[],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Components/CheckoutProgressBar.jsx",[],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/PaymentWidgets/CreditCardForm.jsx",["312","313","314","315","316"],"import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux'\nimport { createOrder, payOrder } from '../Actions/orderActions'\nimport { useHistory } from \"react-router-dom\";\nimport {\n    CardElement,\n    useElements,\n    useStripe,\n} from \"@stripe/react-stripe-js\";\nimport { Form, Modal, Button, Row, Col } from \"react-bootstrap\";\nimport Field from \"./Field\";\nimport Message from '../Components/Message'\nimport FormContainer from \"../Components/FormContainer\";\nimport Tick from '../Components/Tick'\nimport { removeOrder, removeCart } from \"../Actions/cartActions\";\n//css provided by stripe to format elements\n\nconst axios = require(\"axios\");\n\nconst btnStyle = {\n    display: 'block',\n    backgroundColor: 'black',\n    color: 'white',\n    fontFamily: 'arial',\n    letterSpacing: '0.2rem',\n    borderRadius: \"0\",\n    alignItems: 'center',\n    justifyContent: 'center',\n    textDecoration: 'none',\n    display: 'block',\n    width: '100%',\n    padding: '15px 10px 15px 10px'\n}\n\n\n//credit card element specific styling\nconst CARD_OPTIONS = {\n    iconStyle: \"solid\",\n    style: {\n        base: {\n            fontWeight: 700,\n            fontFamily: \"Roboto, Open Sans, Segoe UI, sans-serif\",\n            fontSize: \"16px\",\n            color: \"#424770\",\n            fontSmoothing: \"antialiased\",\n            \":-webkit-autofill\": {\n                color: '#cccccc',\n            },\n            \"::placeholder\": {\n                color: '#888',\n            },\n        },\n        invalid: {\n            iconColor: \"red\",\n            color: \"red\",\n            backgroundColor: \"#ff8080\"\n        },\n    },\n};\n\n//scredit card button sub component\nconst CardField = ({ onChange }) => (\n    <div className=\"FormRow\">\n        <CardElement options={CARD_OPTIONS} onChange={onChange} />\n    </div>\n);\n\n//submit button sub component\nconst SubmitButton = ({ processing, error, children, disabled }) => (\n    <button\n        style={btnStyle}\n        className={`${error ? \"SubmitButton--error\" : \"\"}`}\n        type=\"submit\"\n        disabled={processing || disabled}\n    >\n        {processing ? \"Processing...\" : children}\n    </button>\n);\n\n//component declaration\nexport default function CreditCardForm(props, { match }) {\n    const dispatch = useDispatch()\n\n    const cart = useSelector((state) => state.cart)\n    const { shippingAddress } = cart\n    const order = useSelector((state) => state.cart.order)\n    const { name, email, billingAddress, PostCode, totalPrice } = order\n    let history = useHistory();\n\n    const stripe = useStripe();\n    const elements = useElements();\n    const [error, setError] = useState(null);\n    const [success, setSuccess] = useState(false)\n    const [cardComplete, setCardComplete] = useState(false);\n    const [processing, setProcessing] = useState(false);\n    const [price, setPrice] = useState(totalPrice)\n    const [billingDetails, setBillingDetails] = useState({\n        email: email,\n        name: name,\n        address: {\n            line1: billingAddress,\n            line2: PostCode,\n        }\n    });\n\n\n\n    //resets state on completion\n    const reset = () => {\n        setError(null);\n        setProcessing(false);\n\n        setSuccess(false);\n        setCardComplete(false);\n        setBillingDetails({\n            email: email,\n            name: name,\n            address: {\n                line1: ''\n            }\n        });\n    };\n\n    /*\n    This code runs when a card transaction is submitted\n    There are three main components to this function:\n    \t\n        1. create a new stripe payment method using the form data\n    \t\n        2. get a payment intent from the server using the speficied price\n        3. confirm the payment intent using the new payment method\n        4. send a confiemation to the server if the payment succeeded\n    */\n    const handleSubmit = async (event) => {\n        console.log('SUBMITTED!')\n        console.log(event)\n        //prevent default form values\n        event.preventDefault();\n\n        ///if stripe api is loaded\n        if (!stripe || !elements) {\n            return;\n        }\n\n        //handle errors\n        if (error) {\n            console.log(error);\n            elements.getElement(\"card\").focus();\n            return;\n        }\n\n        if (price === 0) {\n            return;\n        }\n\n        //start processing animation on submit button\n        if (cardComplete) {\n            setProcessing(true);\n        } else {\n            return;\n        }\n\n        //STEP 1:\n        //create new payment method based on card and form information\n        const payload = await stripe.createPaymentMethod({\n            type: \"card\",\n            card: elements.getElement(CardElement),\n            billing_details: billingDetails\n        });\n\n        //handle errors, otherwise set the new payment method in state\n        if (payload.error) {\n            setError(payload.error);\n            return;\n        }\n\n        //STEP 2:\n        //create a new payment request and get irs client secret + id from the server\n        const intentData = await axios\n            .post(\"/stripe\", {\n                //include the bet amount\n                price: price,\n            })\n            .then(\n                (response) => {\n                    //SUCCESS: put client secret and id into an object and return it\n                    return {\n                        secret: response.data.client_secret,\n                        id: response.data.intent_id,\n                    };\n                },\n                (error) => {\n                    //ERROR: log the error and return\n                    setError(error)\n                    return error;\n                }\n            );\n\n        //STEP 3:\n        //confirm the payment and use the new payment method\n        const result = await stripe.confirmCardPayment(intentData.secret, {\n            payment_method: payload.paymentMethod.id,\n        });\n\n        //handle errors again\n        if (result.error) {\n            setError(result.error);\n            return\n        }\n\n        //STEP 4:\n        // The payment has been processed! send a confirmation to the server\n        if (result.paymentIntent.status === \"succeeded\") {\n            const confirmedPayment = await axios\n                .post(\"/confirm-payment\", {\n                    //include id of payment\n                    payment_id: intentData.id,\n                    payment_type: \"stripe\",\n                    //send any other data here\n                })\n                .then(\n                    (response) => {\n                        //SUCCESS: return the response message\n                        return response.data.success;\n                    },\n                    (error) => {\n                        //ERROR:\n                        console.log(error);\n                        setError(error)\n                        return error;\n                    }\n                );\n\n            //reset the state and show the success message\n            if (confirmedPayment) {\n\n                //reset the form\n                reset();\n\n                /*\n                 YOUR APPLICATION SPECIFIC CODE HERE:\n                 for this example all we do is render a modal\n                */\n                dispatch(createOrder(order))\n                setSuccess(true);\n\n                //clear cart and current order on successful payment\n                dispatch(removeOrder())\n                dispatch(removeCart())\n            }\n        }\n    }\n\n\n\n\n    //render\n    return (\n        // the credit card form\n        <FormContainer>\n            <Form onSubmit={handleSubmit}>\n\n                {/* Error modal */}\n                <Modal show={error != null}>\n                    <Modal.Header>\n                        <Modal.Title>Error</Modal.Title>\n                    </Modal.Header>\n\n                    <Modal.Body>\n                        <p>{error}</p>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"danger\" onClick={(event) => { setError(null) }}>Close</Button>\n                    </Modal.Footer>\n                </Modal>\n\n\n                {/* success banner, only shows after confirmation */}\n                <Modal className=\"text-center\" show={success}>\n\n                    <Modal.Body>\n                        <h2 className=\"shop-header-large py-3 text-center\">success!</h2>\n                        <Tick className=\"\" />\n                        <h2 className=\"shop-header-large py-3 text-center\">you paid £{price}</h2>\n                        <h4 className=\"checkout-text\">     your payment is complete, press finish to head to your account page and review your complete order!\n                   </h4>\n\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button style={btnStyle} className=\"btn\" onClick={() => { history.push('/profile') }}>Finish!</Button>\n\n                    </Modal.Footer>\n                </Modal>\n\n                {/* Bet amount field */}\n                <Field\n                    label=\"Amount to Pay\"\n                    id=\"bet\"\n\n                    placeholder={Number(price)}\n                    required\n                    min=\"1\"\n                    read-only\n                    value={price}\n                    onChange={(event) => {\n                        if (event.target.value !== price) {\n                            setPrice(price);\n                        }\n                        else {\n                            setPrice(price);\n                        }\n                    }}\n                />\n\n                {/* Credit Card Payment Form */}\n                <fieldset className=\"FormGroup\">\n                    {/* name field */}\n                    <Field\n                        label=\"Name\"\n                        id=\"name\"\n                        type=\"text\"\n                        required\n                        autoComplete=\"name\"\n                        read-only\n                        disabled='disabled'\n                        value={billingDetails.name}\n                        onChange={(event) => {\n                            setBillingDetails({ ...billingDetails, name: event.target.value });\n                        }}\n                    />\n                    {/* email field */}\n                    <Field\n                        label=\"Email\"\n                        id=\"email\"\n                        type=\"email\"\n                        placeholder=\"janedoe@gmail.com\"\n                        required\n                        autoComplete=\"email\"\n                        value={billingDetails.email}\n                        onChange={(event) => {\n                            setBillingDetails({ ...billingDetails, email: event.target.value });\n                        }}\n                    />\n                    {/* address fields */}\n                    <Field\n                        label=\"Billing Address\"\n                        id=\"line1\"\n                        type=\"address-line1\"\n\n                        required\n\n                        value={billingDetails.address.line1}\n                        onChange={(event) => {\n                            setBillingDetails({\n                                ...billingDetails,\n                                address: {\n                                    line1: event.target.value,\n                                    line2: billingDetails.address.line2\n                                }\n                            });\n                        }}\n                    />\n                    {/* address line 2 */}\n                    <Field\n                        label=\"\"\n                        id=\"line2\"\n                        type=\"address-line2\"\n                        placeholder=\"building/suite number\"\n                        autoComplete=\"address-line2\"\n                        value={billingDetails.address.line2}\n                        onChange={(event) => {\n                            setBillingDetails({\n                                ...billingDetails,\n                                address: {\n                                    line1: billingDetails.address.line1,\n                                    line2: event.target.value,\n                                }\n                            });\n                        }}\n                    />\n                </fieldset>\n\n                {/* credit card field and submit button */}\n                <fieldset className=\"FormGroup py-3\">\n                    <Message variant=\"primary\">Enter Card Payment Details Below</Message>\n                    {/* card */}\n\n                    <CardField\n                        onChange={(event) => {\n\n                            setCardComplete(event.complete);\n                        }\n                        }\n\n                    />\n\n                </fieldset>\n\n                <SubmitButton\n                    type=\"submit\"\n                    processing={processing}\n                    error={error}\n                    disabled={!stripe}\n                >\n                    pay £{price}\n                </SubmitButton>\n            </Form>\n        </FormContainer>\n    );\n\n}","/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Components/Town.jsx",[],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Components/RegisterProgressBar.jsx",[],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/PaymentWidgets/Field.jsx",[],"/Users/jim/Desktop/BSc Web Projects/LIFY DEV/lify/src/Components/Tick.jsx",[],{"ruleId":"317","replacedBy":"318"},{"ruleId":"319","replacedBy":"320"},{"ruleId":"321","severity":1,"message":"322","line":1,"column":28,"nodeType":"323","messageId":"324","endLine":1,"endColumn":36},{"ruleId":"321","severity":1,"message":"325","line":15,"column":13,"nodeType":"323","messageId":"324","endLine":15,"endColumn":28},{"ruleId":"321","severity":1,"message":"326","line":30,"column":13,"nodeType":"323","messageId":"324","endLine":30,"endColumn":18},{"ruleId":"327","severity":1,"message":"328","line":85,"column":9,"nodeType":"329","messageId":"330","endLine":85,"endColumn":16},{"ruleId":"327","severity":1,"message":"328","line":88,"column":9,"nodeType":"329","messageId":"330","endLine":88,"endColumn":16},{"ruleId":"321","severity":1,"message":"331","line":17,"column":18,"nodeType":"323","messageId":"324","endLine":17,"endColumn":25},{"ruleId":"321","severity":1,"message":"332","line":21,"column":27,"nodeType":"323","messageId":"324","endLine":21,"endColumn":43},{"ruleId":"321","severity":1,"message":"333","line":22,"column":18,"nodeType":"323","messageId":"324","endLine":22,"endColumn":25},{"ruleId":"321","severity":1,"message":"334","line":23,"column":20,"nodeType":"323","messageId":"324","endLine":23,"endColumn":29},{"ruleId":"321","severity":1,"message":"335","line":24,"column":22,"nodeType":"323","messageId":"324","endLine":24,"endColumn":33},{"ruleId":"327","severity":1,"message":"328","line":46,"column":9,"nodeType":"329","messageId":"330","endLine":46,"endColumn":16},{"ruleId":"321","severity":1,"message":"336","line":4,"column":73,"nodeType":"323","messageId":"324","endLine":4,"endColumn":82},{"ruleId":"327","severity":1,"message":"328","line":58,"column":9,"nodeType":"329","messageId":"330","endLine":58,"endColumn":16},{"ruleId":"321","severity":1,"message":"337","line":4,"column":67,"nodeType":"323","messageId":"324","endLine":4,"endColumn":71},{"ruleId":"321","severity":1,"message":"325","line":27,"column":13,"nodeType":"323","messageId":"324","endLine":27,"endColumn":28},{"ruleId":"321","severity":1,"message":"338","line":30,"column":19,"nodeType":"323","messageId":"324","endLine":30,"endColumn":27},{"ruleId":"321","severity":1,"message":"339","line":31,"column":21,"nodeType":"323","messageId":"324","endLine":31,"endColumn":31},{"ruleId":"321","severity":1,"message":"340","line":41,"column":21,"nodeType":"323","messageId":"324","endLine":41,"endColumn":31},{"ruleId":"341","severity":1,"message":"342","line":63,"column":8,"nodeType":"343","endLine":63,"endColumn":54,"suggestions":"344"},{"ruleId":"327","severity":1,"message":"328","line":114,"column":9,"nodeType":"329","messageId":"330","endLine":114,"endColumn":16},{"ruleId":"321","severity":1,"message":"326","line":22,"column":22,"nodeType":"323","messageId":"324","endLine":22,"endColumn":27},{"ruleId":"321","severity":1,"message":"345","line":22,"column":29,"nodeType":"323","messageId":"324","endLine":22,"endColumn":35},{"ruleId":"327","severity":1,"message":"328","line":44,"column":9,"nodeType":"329","messageId":"330","endLine":44,"endColumn":16},{"ruleId":"321","severity":1,"message":"325","line":31,"column":13,"nodeType":"323","messageId":"324","endLine":31,"endColumn":28},{"ruleId":"321","severity":1,"message":"346","line":34,"column":12,"nodeType":"323","messageId":"324","endLine":34,"endColumn":19},{"ruleId":"321","severity":1,"message":"340","line":34,"column":21,"nodeType":"323","messageId":"324","endLine":34,"endColumn":31},{"ruleId":"321","severity":1,"message":"347","line":53,"column":11,"nodeType":"323","messageId":"324","endLine":53,"endColumn":32},{"ruleId":"321","severity":1,"message":"348","line":58,"column":11,"nodeType":"323","messageId":"324","endLine":58,"endColumn":26},{"ruleId":"321","severity":1,"message":"349","line":71,"column":11,"nodeType":"323","messageId":"324","endLine":71,"endColumn":17},{"ruleId":"321","severity":1,"message":"350","line":75,"column":11,"nodeType":"323","messageId":"324","endLine":75,"endColumn":19},{"ruleId":"327","severity":1,"message":"328","line":85,"column":9,"nodeType":"329","messageId":"330","endLine":85,"endColumn":16},{"ruleId":"327","severity":1,"message":"328","line":31,"column":9,"nodeType":"329","messageId":"330","endLine":31,"endColumn":16},{"ruleId":"321","severity":1,"message":"351","line":4,"column":45,"nodeType":"323","messageId":"324","endLine":4,"endColumn":51},{"ruleId":"321","severity":1,"message":"352","line":19,"column":22,"nodeType":"323","messageId":"324","endLine":19,"endColumn":33},{"ruleId":"321","severity":1,"message":"353","line":22,"column":29,"nodeType":"323","messageId":"324","endLine":22,"endColumn":47},{"ruleId":"321","severity":1,"message":"346","line":23,"column":12,"nodeType":"323","messageId":"324","endLine":23,"endColumn":19},{"ruleId":"321","severity":1,"message":"354","line":37,"column":59,"nodeType":"323","messageId":"324","endLine":37,"endColumn":71},{"ruleId":"321","severity":1,"message":"355","line":43,"column":33,"nodeType":"323","messageId":"324","endLine":43,"endColumn":44},{"ruleId":"321","severity":1,"message":"356","line":43,"column":53,"nodeType":"323","messageId":"324","endLine":43,"endColumn":62},{"ruleId":"321","severity":1,"message":"357","line":78,"column":11,"nodeType":"323","messageId":"324","endLine":78,"endColumn":24},{"ruleId":"327","severity":1,"message":"328","line":98,"column":9,"nodeType":"329","messageId":"330","endLine":98,"endColumn":16},{"ruleId":"321","severity":1,"message":"326","line":24,"column":29,"nodeType":"323","messageId":"324","endLine":24,"endColumn":34},{"ruleId":"321","severity":1,"message":"358","line":27,"column":56,"nodeType":"323","messageId":"324","endLine":27,"endColumn":69},{"ruleId":"321","severity":1,"message":"359","line":33,"column":38,"nodeType":"323","messageId":"324","endLine":33,"endColumn":53},{"ruleId":"321","severity":1,"message":"360","line":33,"column":62,"nodeType":"323","messageId":"324","endLine":33,"endColumn":75},{"ruleId":"327","severity":1,"message":"328","line":93,"column":9,"nodeType":"329","messageId":"330","endLine":93,"endColumn":16},{"ruleId":"321","severity":1,"message":"360","line":38,"column":62,"nodeType":"323","messageId":"324","endLine":38,"endColumn":75},{"ruleId":"327","severity":1,"message":"328","line":59,"column":9,"nodeType":"329","messageId":"330","endLine":59,"endColumn":16},{"ruleId":"341","severity":1,"message":"361","line":85,"column":8,"nodeType":"343","endLine":85,"endColumn":62,"suggestions":"362"},{"ruleId":"321","severity":1,"message":"360","line":23,"column":62,"nodeType":"323","messageId":"324","endLine":23,"endColumn":75},{"ruleId":"327","severity":1,"message":"328","line":39,"column":9,"nodeType":"329","messageId":"330","endLine":39,"endColumn":16},{"ruleId":"327","severity":1,"message":"328","line":52,"column":9,"nodeType":"329","messageId":"330","endLine":52,"endColumn":16},{"ruleId":"341","severity":1,"message":"363","line":76,"column":8,"nodeType":"343","endLine":76,"endColumn":83,"suggestions":"364"},{"ruleId":"321","severity":1,"message":"365","line":16,"column":12,"nodeType":"323","messageId":"324","endLine":16,"endColumn":16},{"ruleId":"321","severity":1,"message":"366","line":17,"column":12,"nodeType":"323","messageId":"324","endLine":17,"endColumn":17},{"ruleId":"321","severity":1,"message":"367","line":18,"column":12,"nodeType":"323","messageId":"324","endLine":18,"endColumn":20},{"ruleId":"321","severity":1,"message":"352","line":18,"column":22,"nodeType":"323","messageId":"324","endLine":18,"endColumn":33},{"ruleId":"321","severity":1,"message":"368","line":19,"column":12,"nodeType":"323","messageId":"324","endLine":19,"endColumn":19},{"ruleId":"321","severity":1,"message":"369","line":20,"column":12,"nodeType":"323","messageId":"324","endLine":20,"endColumn":17},{"ruleId":"321","severity":1,"message":"370","line":21,"column":12,"nodeType":"323","messageId":"324","endLine":21,"endColumn":27},{"ruleId":"321","severity":1,"message":"353","line":21,"column":29,"nodeType":"323","messageId":"324","endLine":21,"endColumn":47},{"ruleId":"321","severity":1,"message":"346","line":22,"column":12,"nodeType":"323","messageId":"324","endLine":22,"endColumn":19},{"ruleId":"321","severity":1,"message":"340","line":22,"column":21,"nodeType":"323","messageId":"324","endLine":22,"endColumn":31},{"ruleId":"321","severity":1,"message":"371","line":27,"column":13,"nodeType":"323","messageId":"324","endLine":27,"endColumn":20},{"ruleId":"321","severity":1,"message":"372","line":33,"column":39,"nodeType":"323","messageId":"324","endLine":33,"endColumn":45},{"ruleId":"341","severity":1,"message":"373","line":75,"column":8,"nodeType":"343","endLine":75,"endColumn":59,"suggestions":"374"},{"ruleId":"327","severity":1,"message":"328","line":96,"column":9,"nodeType":"329","messageId":"330","endLine":96,"endColumn":16},{"ruleId":"321","severity":1,"message":"375","line":99,"column":11,"nodeType":"323","messageId":"324","endLine":99,"endColumn":16},{"ruleId":"321","severity":1,"message":"376","line":104,"column":11,"nodeType":"323","messageId":"324","endLine":104,"endColumn":14},{"ruleId":"321","severity":1,"message":"377","line":16,"column":12,"nodeType":"323","messageId":"324","endLine":16,"endColumn":20},{"ruleId":"321","severity":1,"message":"378","line":31,"column":22,"nodeType":"323","messageId":"324","endLine":31,"endColumn":37},{"ruleId":"327","severity":1,"message":"328","line":89,"column":9,"nodeType":"329","messageId":"330","endLine":89,"endColumn":16},{"ruleId":"321","severity":1,"message":"379","line":3,"column":23,"nodeType":"323","messageId":"324","endLine":3,"endColumn":31},{"ruleId":"321","severity":1,"message":"380","line":10,"column":31,"nodeType":"323","messageId":"324","endLine":10,"endColumn":34},{"ruleId":"321","severity":1,"message":"381","line":10,"column":36,"nodeType":"323","messageId":"324","endLine":10,"endColumn":39},{"ruleId":"327","severity":1,"message":"328","line":30,"column":5,"nodeType":"329","messageId":"330","endLine":30,"endColumn":12},{"ruleId":"321","severity":1,"message":"325","line":85,"column":13,"nodeType":"323","messageId":"324","endLine":85,"endColumn":28},"no-native-reassign",["382"],"no-negated-in-lhs",["383"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'shippingAddress' is assigned a value but never used.","'error' is assigned a value but never used.","no-dupe-keys","Duplicate key 'display'.","ObjectExpression","unexpected","'setName' is assigned a value but never used.","'setStreetAddress' is assigned a value but never used.","'setTown' is assigned a value but never used.","'setCounty' is assigned a value but never used.","'setPostcode' is assigned a value but never used.","'Container' is defined but never used.","'Card' is defined but never used.","'setEmail' is assigned a value but never used.","'setAddress' is assigned a value but never used.","'setMessage' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'address'. Either include it or remove the dependency array.","ArrayExpression",["384"],"'result' is assigned a value but never used.","'message' is assigned a value but never used.","'removeFromCartHandler' is assigned a value but never used.","'checkOutHandler' is assigned a value but never used.","'goBack' is assigned a value but never used.","'btnStyle' is assigned a value but never used.","'logout' is defined but never used.","'setPassword' is assigned a value but never used.","'setConfirmPassword' is assigned a value but never used.","'errorROrders' is assigned a value but never used.","'loadingDash' is assigned a value but never used.","'errorDash' is assigned a value but never used.","'submitHandler' is assigned a value but never used.","'errorCustomer' is assigned a value but never used.","'loadingRDetails' is assigned a value but never used.","'errorRDetails' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'userInfo._id'. Either include it or remove the dependency array.",["385"],"React Hook useEffect has a missing dependency: 'retailerDetail'. Either include it or remove the dependency array.",["386"],"'name' is assigned a value but never used.","'email' is assigned a value but never used.","'password' is assigned a value but never used.","'address' is assigned a value but never used.","'phone' is assigned a value but never used.","'confirmPassword' is assigned a value but never used.","'loading' is assigned a value but never used.","'errorC' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'acceptedOrder._id'. Either include it or remove the dependency array.",["387"],"'green' is assigned a value but never used.","'red' is assigned a value but never used.","'messages' is assigned a value but never used.","'completeLoading' is assigned a value but never used.","'payOrder' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"388","fix":"389"},{"desc":"390","fix":"391"},{"desc":"392","fix":"393"},{"desc":"394","fix":"395"},"Update the dependencies array to be: [dispatch, userInfo, productId, qty, delivery, address]",{"range":"396","text":"397"},"Update the dependencies array to be: [dispatch, history, productId, product, successUpdate, userInfo._id]",{"range":"398","text":"399"},"Update the dependencies array to be: [dispatch, history, userInfo, successDelete, successCreate, createdProduct, retailerDetail]",{"range":"400","text":"401"},"Update the dependencies array to be: [dispatch, history, userInfo, success, user, error, acceptedOrder._id]",{"range":"402","text":"403"},[2127,2173],"[dispatch, userInfo, productId, qty, delivery, address]",[2540,2594],"[dispatch, history, productId, product, successUpdate, userInfo._id]",[2399,2474],"[dispatch, history, userInfo, successDelete, successCreate, createdProduct, retailerDetail]",[2263,2314],"[dispatch, history, userInfo, success, user, error, acceptedOrder._id]"]